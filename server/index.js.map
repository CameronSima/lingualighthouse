{
  "version": 3,
  "sources": ["css-bundle-update-plugin-ns:/Users/cameronsima/dev/yt_search_remix/node_modules/@remix-run/css-bundle/dist/index.js", "../mocks/index.js", "../server.ts", "server-entry-module:@remix-run/dev/server-build", "../app/entry.server.tsx", "../app/root.tsx", "../app/session.server.ts", "../app/models/user.server.ts", "../app/routes/api.jobs.$channelId.$searchText.tsx", "../app/models/job.server.ts", "../app/routes/jobs.$channelId.$searchText.tsx", "../app/components/Spinner.tsx", "../app/routes/api.jobs.run.$channelId.tsx", "../app/models/channel.server.ts", "../app/s3.server.ts", "../app/transcript.server.ts", "../app/youtube.server.ts", "../app/models/video.server.ts", "../app/routes/notes.$noteId.tsx", "../app/models/note.server.ts", "../app/routes/notes._index.tsx", "../app/routes/notes.new.tsx", "../app/routes/channel.tsx", "../app/search.server.ts", "../app/routes/_index.tsx", "../app/routes/logout.tsx", "../app/routes/about.tsx", "../app/routes/login.tsx", "../app/utils.ts", "../app/routes/notes.tsx", "../app/routes/video.tsx", "../app/components/VideoContainer.tsx", "../app/components/ProgressBar.tsx", "../app/components/YoutubeVideo.tsx", "../app/hooks/isInView.tsx", "../app/routes/join.tsx", "../cypress/support/test-routes/create-user.ts", "server-assets-manifest:@remix-run/dev/assets-manifest"],
  "sourcesContent": ["/**\n * @remix-run/css-bundle v1.18.1\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n// Injected by `cssBundlePlugin`\nlet cssBundleHref = typeof undefined === \"string\" ? undefined : undefined;\n\nexports.cssBundleHref = cssBundleHref;\n", "const { setupServer } = require(\"msw/node\");\n\nconst server = setupServer();\n\nserver.listen({ onUnhandledRequest: \"bypass\" });\n\nprocess.once(\"SIGINT\", () => server.close());\nprocess.once(\"SIGTERM\", () => server.close());\n", "import { createRequestHandler } from \"@remix-run/architect\";\nimport * as build from \"@remix-run/dev/server-build\";\n\nif (process.env.NODE_ENV !== \"production\") {\n  require(\"./mocks\");\n}\n\nexport const handler = createRequestHandler({\n  build,\n  mode: process.env.NODE_ENV,\n});\n", "\nimport * as entryServer from \"/Users/cameronsima/dev/yt_search_remix/app/entry.server.tsx\";\nimport * as route0 from \"./root.tsx\";\nimport * as route1 from \"./routes/api.jobs.$channelId.$searchText.tsx\";\nimport * as route2 from \"./routes/jobs.$channelId.$searchText.tsx\";\nimport * as route3 from \"./routes/api.jobs.run.$channelId.tsx\";\nimport * as route4 from \"./routes/notes.$noteId.tsx\";\nimport * as route5 from \"./routes/notes._index.tsx\";\nimport * as route6 from \"./routes/notes.new.tsx\";\nimport * as route7 from \"./routes/channel.tsx\";\nimport * as route8 from \"./routes/_index.tsx\";\nimport * as route9 from \"./routes/logout.tsx\";\nimport * as route10 from \"./routes/about.tsx\";\nimport * as route11 from \"./routes/login.tsx\";\nimport * as route12 from \"./routes/notes.tsx\";\nimport * as route13 from \"./routes/video.tsx\";\nimport * as route14 from \"./routes/join.tsx\";\nimport * as route15 from \"./../cypress/support/test-routes/create-user.ts\";\n  export { default as assets } from \"@remix-run/dev/assets-manifest\";\n  export const assetsBuildDirectory = \"public/build\";\n  export const future = {\"v2_dev\":false,\"unstable_postcss\":false,\"unstable_tailwind\":false,\"v2_errorBoundary\":true,\"v2_headers\":true,\"v2_meta\":true,\"v2_normalizeFormMethod\":true,\"v2_routeConvention\":true};\n  export const publicPath = \"/_static/build/\";\n  export const entry = { module: entryServer };\n  \n  export const routes = {\n    \"root\": {\n      id: \"root\",\n      parentId: undefined,\n      path: \"\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route0\n    },\n  \"routes/api.jobs.$channelId.$searchText\": {\n      id: \"routes/api.jobs.$channelId.$searchText\",\n      parentId: \"root\",\n      path: \"api/jobs/:channelId/:searchText\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route1\n    },\n  \"routes/jobs.$channelId.$searchText\": {\n      id: \"routes/jobs.$channelId.$searchText\",\n      parentId: \"root\",\n      path: \"jobs/:channelId/:searchText\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route2\n    },\n  \"routes/api.jobs.run.$channelId\": {\n      id: \"routes/api.jobs.run.$channelId\",\n      parentId: \"root\",\n      path: \"api/jobs/run/:channelId\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route3\n    },\n  \"routes/notes.$noteId\": {\n      id: \"routes/notes.$noteId\",\n      parentId: \"routes/notes\",\n      path: \":noteId\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route4\n    },\n  \"routes/notes._index\": {\n      id: \"routes/notes._index\",\n      parentId: \"routes/notes\",\n      path: undefined,\n      index: true,\n      caseSensitive: undefined,\n      module: route5\n    },\n  \"routes/notes.new\": {\n      id: \"routes/notes.new\",\n      parentId: \"routes/notes\",\n      path: \"new\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route6\n    },\n  \"routes/channel\": {\n      id: \"routes/channel\",\n      parentId: \"root\",\n      path: \"channel\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route7\n    },\n  \"routes/_index\": {\n      id: \"routes/_index\",\n      parentId: \"root\",\n      path: undefined,\n      index: true,\n      caseSensitive: undefined,\n      module: route8\n    },\n  \"routes/logout\": {\n      id: \"routes/logout\",\n      parentId: \"root\",\n      path: \"logout\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route9\n    },\n  \"routes/about\": {\n      id: \"routes/about\",\n      parentId: \"root\",\n      path: \"about\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route10\n    },\n  \"routes/login\": {\n      id: \"routes/login\",\n      parentId: \"root\",\n      path: \"login\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route11\n    },\n  \"routes/notes\": {\n      id: \"routes/notes\",\n      parentId: \"root\",\n      path: \"notes\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route12\n    },\n  \"routes/video\": {\n      id: \"routes/video\",\n      parentId: \"root\",\n      path: \"video\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route13\n    },\n  \"routes/join\": {\n      id: \"routes/join\",\n      parentId: \"root\",\n      path: \"join\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route14\n    },\n  \"../cypress/support/test-routes/create-user\": {\n      id: \"../cypress/support/test-routes/create-user\",\n      parentId: \"root\",\n      path: \"__tests/create-user\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route15\n    }\n  };", "/**\n * By default, Remix will handle generating the HTTP Response for you.\n * You are free to delete this file if you'd like to, but if you ever want it revealed again, you can run `npx remix reveal` \u2728\n * For more information, see https://remix.run/file-conventions/entry.server\n */\n\nimport { PassThrough } from \"node:stream\";\n\nimport type { AppLoadContext, EntryContext } from \"@remix-run/node\";\nimport { Response } from \"@remix-run/node\";\nimport { RemixServer } from \"@remix-run/react\";\nimport isbot from \"isbot\";\nimport { renderToPipeableStream } from \"react-dom/server\";\n\nconst ABORT_DELAY = 600_000;\n\nexport default function handleRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext,\n  loadContext: AppLoadContext\n) {\n  return isbot(request.headers.get(\"user-agent\"))\n    ? handleBotRequest(\n        request,\n        responseStatusCode,\n        responseHeaders,\n        remixContext\n      )\n    : handleBrowserRequest(\n        request,\n        responseStatusCode,\n        responseHeaders,\n        remixContext\n      );\n}\n\nfunction handleBotRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext\n) {\n  return new Promise((resolve, reject) => {\n    let shellRendered = false;\n    const { pipe, abort } = renderToPipeableStream(\n      <RemixServer\n        context={remixContext}\n        url={request.url}\n        abortDelay={ABORT_DELAY}\n      />,\n      {\n        onAllReady() {\n          shellRendered = true;\n          const body = new PassThrough();\n\n          responseHeaders.set(\"Content-Type\", \"text/html\");\n\n          resolve(\n            new Response(body, {\n              headers: responseHeaders,\n              status: responseStatusCode,\n            })\n          );\n\n          pipe(body);\n        },\n        onShellError(error: unknown) {\n          reject(error);\n        },\n        onError(error: unknown) {\n          responseStatusCode = 500;\n          // Log streaming rendering errors from inside the shell.  Don't log\n          // errors encountered during initial shell rendering since they'll\n          // reject and get logged in handleDocumentRequest.\n          if (shellRendered) {\n            console.error(error);\n          }\n        },\n      }\n    );\n\n    setTimeout(abort, ABORT_DELAY);\n  });\n}\n\nfunction handleBrowserRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext\n) {\n  return new Promise((resolve, reject) => {\n    let shellRendered = false;\n    const { pipe, abort } = renderToPipeableStream(\n      <RemixServer\n        context={remixContext}\n        url={request.url}\n        abortDelay={ABORT_DELAY}\n      />,\n      {\n        onShellReady() {\n          shellRendered = true;\n          const body = new PassThrough();\n\n          responseHeaders.set(\"Content-Type\", \"text/html\");\n\n          resolve(\n            new Response(body, {\n              headers: responseHeaders,\n              status: responseStatusCode,\n            })\n          );\n\n          pipe(body);\n        },\n        onShellError(error: unknown) {\n          reject(error);\n        },\n        onError(error: unknown) {\n          responseStatusCode = 500;\n          // Log streaming rendering errors from inside the shell.  Don't log\n          // errors encountered during initial shell rendering since they'll\n          // reject and get logged in handleDocumentRequest.\n          if (shellRendered) {\n            console.error(error);\n          }\n        },\n      }\n    );\n\n    setTimeout(abort, ABORT_DELAY);\n  });\n}\n", "import { cssBundleHref } from \"@remix-run/css-bundle\";\nimport type { LinksFunction, LoaderArgs } from \"@remix-run/node\";\nimport { json } from \"@remix-run/node\";\nimport {\n  Link,\n  Links,\n  LiveReload,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration,\n  useLoaderData } from\n\"@remix-run/react\";\nimport { useEffect } from \"react\";\n\nimport { getUser } from \"~/session.server\";\nimport stylesheet from \"~/tailwind.css\";\nimport icon from \"../public/lighthouse.png\";\nimport initRum from \"./rum\";\n\nexport const links: LinksFunction = () => [\n{ rel: \"stylesheet\", href: stylesheet },\n...(cssBundleHref ? [{ rel: \"stylesheet\", href: cssBundleHref }] : []),\n// NOTE: Architect deploys the public directory to /_static/\n{ rel: \"icon\", href: \"/_static/favicon.ico\" }];\n\n\nexport const loader = async ({ request }: LoaderArgs) => {\n  return json({ user: await getUser(request) });\n};\n\nexport default function App() {\n  const data = useLoaderData<typeof loader>();\n  const isLoggedIn = !!data.user;\n\n  useEffect(() => {\n    if (process.env.NODE_ENV === \"production\") {\n      initRum().\n      then(() => console.log(\"RUM initialized\")).\n      catch((err) => console.error(\"Error initializing RUM\", err));\n    }\n  }, []);\n\n  return (\n    <html lang=\"en\" className=\"h-full\">\n      <head>\n        <meta charSet=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width,initial-scale=1\" />\n        <Meta />\n        <Links />\n      </head>\n      <body className=\"h-full\">\n        <Header isLoggedIn={isLoggedIn} />\n        <Outlet />\n        <ScrollRestoration />\n        <Scripts />\n        <LiveReload />\n      </body>\n    </html>);\n\n}\n\nfunction Header({ isLoggedIn }: {isLoggedIn: boolean;}) {\n  return (\n    <header className=\"bg-white\">\n      <nav\n        className=\"mx-auto flex max-w-7xl items-center justify-between p-6 lg:px-8\"\n        aria-label=\"Global\">\n\n        <div className=\"flex lg:flex-1\">\n          <a href=\"/\" className=\"-m-1.5 p-1.5\">\n            <span className=\"sr-only\">Lingua Lighthouse</span>\n            <img className=\"h-8 w-auto\" src={icon} alt=\"\" />\n          </a>\n        </div>\n\n        <Link\n          to=\"/about\"\n          className=\"text-sm font-semibold leading-6 text-gray-900\">\n\n          About\n        </Link>\n\n        <div className=\"gap-6 lg:flex lg:flex-1 lg:justify-end\">\n          {!isLoggedIn &&\n          <Link\n            to=\"/login\"\n            className=\"text-sm font-semibold leading-6 text-gray-900\">\n\n              Log in <span>&rarr;</span>\n            </Link>}\n\n        </div>\n      </nav>\n    </header>);\n\n}", "import { createCookieSessionStorage, redirect } from \"@remix-run/node\";\nimport invariant from \"tiny-invariant\";\n\nimport type { User } from \"~/models/user.server\";\nimport { getUserById } from \"~/models/user.server\";\n\ninvariant(process.env.SESSION_SECRET, \"SESSION_SECRET must be set\");\n\nexport const sessionStorage = createCookieSessionStorage({\n  cookie: {\n    name: \"__session\",\n    httpOnly: true,\n    path: \"/\",\n    sameSite: \"lax\",\n    secrets: [process.env.SESSION_SECRET],\n    secure: process.env.NODE_ENV === \"production\",\n  },\n});\n\nconst USER_SESSION_KEY = \"userId\";\n\nexport async function getSession(request: Request) {\n  const cookie = request.headers.get(\"Cookie\");\n  return sessionStorage.getSession(cookie);\n}\n\nexport async function isLoggedIn(request: Request) {\n  const session = await getSession(request);\n  return session.has(USER_SESSION_KEY);\n}\n\nexport async function getUserId(\n  request: Request\n): Promise<User[\"id\"] | undefined> {\n  const session = await getSession(request);\n  const userId = session.get(USER_SESSION_KEY);\n  return userId;\n}\n\nexport async function getUser(request: Request) {\n  const userId = await getUserId(request);\n  if (userId === undefined) return null;\n\n  const user = await getUserById(userId);\n  if (user) return user;\n\n  throw await logout(request);\n}\n\nexport async function requireUserId(\n  request: Request,\n  redirectTo: string = new URL(request.url).pathname\n) {\n  const userId = await getUserId(request);\n  if (!userId) {\n    const searchParams = new URLSearchParams([[\"redirectTo\", redirectTo]]);\n    throw redirect(`/login?${searchParams}`);\n  }\n  return userId;\n}\n\nexport async function requireUser(request: Request) {\n  const userId = await requireUserId(request);\n\n  const user = await getUserById(userId);\n  if (user) return user;\n\n  throw await logout(request);\n}\n\nexport async function createUserSession({\n  request,\n  userId,\n  remember,\n  redirectTo,\n}: {\n  request: Request;\n  userId: string;\n  remember: boolean;\n  redirectTo: string;\n}) {\n  const session = await getSession(request);\n  session.set(USER_SESSION_KEY, userId);\n  return redirect(redirectTo, {\n    headers: {\n      \"Set-Cookie\": await sessionStorage.commitSession(session, {\n        maxAge: remember\n          ? 60 * 60 * 24 * 7 // 7 days\n          : undefined,\n      }),\n    },\n  });\n}\n\nexport async function logout(request: Request) {\n  const session = await getSession(request);\n  return redirect(\"/\", {\n    headers: {\n      \"Set-Cookie\": await sessionStorage.destroySession(session),\n    },\n  });\n}\n", "import arc from \"@architect/functions\";\nimport bcrypt from \"bcryptjs\";\nimport invariant from \"tiny-invariant\";\n\nexport type User = { id: `email#${string}`; email: string };\nexport type Password = { password: string };\n\nexport async function getUserById(id: User[\"id\"]): Promise<User | null> {\n  const db = await arc.tables();\n  const result = await db.user.query({\n    KeyConditionExpression: \"pk = :pk\",\n    ExpressionAttributeValues: { \":pk\": id },\n  });\n\n  const [record] = result.Items;\n  if (record) return { id: record.pk, email: record.email };\n  return null;\n}\n\nexport async function getUserByEmail(email: User[\"email\"]) {\n  return getUserById(`email#${email}`);\n}\n\nasync function getUserPasswordByEmail(email: User[\"email\"]) {\n  const db = await arc.tables();\n  const result = await db.password.query({\n    KeyConditionExpression: \"pk = :pk\",\n    ExpressionAttributeValues: { \":pk\": `email#${email}` },\n  });\n\n  const [record] = result.Items;\n\n  if (record) return { hash: record.password };\n  return null;\n}\n\nexport async function createUser(\n  email: User[\"email\"],\n  password: Password[\"password\"]\n) {\n  const hashedPassword = await bcrypt.hash(password, 10);\n  const db = await arc.tables();\n  await db.password.put({\n    pk: `email#${email}`,\n    password: hashedPassword,\n  });\n\n  await db.user.put({\n    pk: `email#${email}`,\n    email,\n  });\n\n  const user = await getUserByEmail(email);\n  invariant(user, `User not found after being created. This should not happen`);\n\n  return user;\n}\n\nexport async function deleteUser(email: User[\"email\"]) {\n  const db = await arc.tables();\n  await db.password.delete({ pk: `email#${email}` });\n  await db.user.delete({ pk: `email#${email}` });\n}\n\nexport async function verifyLogin(\n  email: User[\"email\"],\n  password: Password[\"password\"]\n) {\n  const userPassword = await getUserPasswordByEmail(email);\n\n  if (!userPassword) {\n    return undefined;\n  }\n\n  const isValid = await bcrypt.compare(password, userPassword.hash);\n  if (!isValid) {\n    return undefined;\n  }\n\n  return getUserByEmail(email);\n}\n", "import { LoaderArgs } from \"@remix-run/server-runtime\";\n\nimport { json } from \"react-router\";\nimport { createJob, getJobByChannelId } from \"~/models/job.server\";\n\nexport const loader = async ({ params, request }: LoaderArgs) => {\n  const { channelId, searchText } = params;\n  const domain = new URL(request.url).origin;\n\n  const job = await getJobByChannelId(channelId as string);\n\n  if (job) {\n    if (job.status === \"completed\") {\n      // const videos = await getVideosByChannelId(channelId as string);\n      // const results = await searchChannelFromDb(videos, searchText as string);\n      return json({ channelId, searchText, loading: false, job: job });\n    } else {\n      return json({ channelId, searchText, loading: true, job: job });\n    }\n  } else {\n    // create new job\n    const job = await createJob(channelId as string);\n    fetch(`${domain}/api/jobs/run/${channelId}/`);\n    return json({ channelId, searchText, loading: true, job: job });\n  }\n};\n", "import arc from \"@architect/functions\";\nimport { createId } from \"@paralleldrive/cuid2\";\n\nexport type JobStatus =\n  | \"pending\"\n  | \"initializing\"\n  | \"searching\"\n  | \"processing\"\n  | \"completed\"\n  | \"failed\";\n\nexport type Job = {\n  id: string;\n  channelId: string;\n  status: JobStatus;\n  numVideosFound: number;\n  numVideosProcessed: number;\n  numVideosFailed: number;\n\n  // expiration is the mechanism to recheck channels for new videos\n  TTL: number;\n};\n\n//const skToId = (sk: string): string => sk.replace(/^Job#/, \"\");\n//const idToSk = (id: string): string => `Job#${id}`;\n\nexport const createJob = async (channelId: string) => {\n  const db = await arc.tables();\n  const result = await db.job.put({\n    pk: channelId,\n    id: createId(),\n    status: \"pending\",\n    // expire in 1 day\n    TTL: Math.floor(Date.now() / 1000) + 60 * 60 * 24,\n\n    numVideosFound: 0,\n    numVideosProcessed: 0,\n    numVideosFailed: 0,\n  });\n  return result as Job;\n};\n\nexport const getJobByChannelId = async (\n  channelId: string\n): Promise<Job | undefined> => {\n  const db = await arc.tables();\n  const result = await db.job.query({\n    KeyConditionExpression: \"pk = :pk\",\n    ExpressionAttributeValues: { \":pk\": channelId },\n  });\n  const [record] = result.Items;\n  if (record) {\n    return {\n      id: record.pk,\n      channelId: record.channelId,\n      status: record.status,\n      numVideosFound: record.numVideosFound,\n      numVideosProcessed: record.numVideosProcessed,\n      numVideosFailed: record.numVideosFailed,\n      TTL: record.TTL,\n    };\n  }\n};\n\nexport const updateJobStatus = async (\n  channelId: string,\n  status: JobStatus\n): Promise<void> => {\n  const db = await arc.tables();\n  await db.job.update({\n    Key: { pk: channelId },\n    UpdateExpression: \"set #status = :status\",\n    ExpressionAttributeNames: { \"#status\": \"status\" },\n    ExpressionAttributeValues: { \":status\": status },\n  });\n};\n\nexport const updateJobStats = async (\n  channelId: string,\n  numVideosFound: number,\n  numVideosProcessed: number,\n  numVideosFailed: number\n): Promise<void> => {\n  const db = await arc.tables();\n  await db.job.update({\n    Key: { pk: channelId },\n    UpdateExpression:\n      \"set #numVideosFound = :numVideosFound, #numVideosProcessed = :numVideosProcessed, #numVideosFailed = :numVideosFailed\",\n    ExpressionAttributeNames: {\n      \"#numVideosFound\": \"numVideosFound\",\n      \"#numVideosProcessed\": \"numVideosProcessed\",\n      \"#numVideosFailed\": \"numVideosFailed\",\n    },\n    ExpressionAttributeValues: {\n      \":numVideosFound\": numVideosFound,\n      \":numVideosProcessed\": numVideosProcessed,\n      \":numVideosFailed\": numVideosFailed,\n    },\n  });\n};\n", "import { useFetcher, useLoaderData, useNavigate } from \"@remix-run/react\";\nimport { LoaderArgs } from \"@remix-run/server-runtime\";\nimport { useEffect, useState } from \"react\";\n\nimport { json } from \"react-router\";\nimport Spinner from \"~/components/Spinner\";\n\nexport const loader = async ({ params, request }: LoaderArgs) => {\n  const { channelId, searchText } = params;\n  return json({ channelId, searchText });\n};\n\nexport default function JobStatusPage() {\n  const navigate = useNavigate();\n  const fetcher = useFetcher<typeof loader>();\n  const { channelId, searchText } = useLoaderData<typeof loader>();\n  const [stats, setStats] = useState({\n    numVideosFound: 0,\n    numVideosProcessed: 0,\n    numVideosFailed: 0,\n  });\n\n  // effect for loading new data\n  useEffect(() => {\n    const interval = setInterval(() => {\n      const jobStatus = fetcher.data?.job?.status;\n      if (jobStatus === \"completed\") {\n        clearInterval(interval);\n        return navigate(`/channel/?channelId=${channelId}&text=${searchText}`);\n      }\n      fetcher.load(`/api/jobs/${channelId}/${searchText}`);\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [fetcher.data?.job?.status]);\n\n  // effect for incrementing the video stats by one from old value to new value\n  useEffect(() => {\n    const currentStats = {\n      numVideosFound: fetcher.data?.job?.numVideosFound || 0,\n      numVideosProcessed: fetcher.data?.job?.numVideosProcessed || 0,\n      numVideosFailed: fetcher.data?.job?.numVideosFailed || 0,\n    };\n\n    const incrementInterval = setInterval(() => {\n      setStats((prevStats) => ({\n        numVideosFound:\n          prevStats.numVideosFound < currentStats.numVideosFound\n            ? prevStats.numVideosFound + 1\n            : currentStats.numVideosFound,\n        numVideosProcessed:\n          prevStats.numVideosProcessed < currentStats.numVideosProcessed\n            ? prevStats.numVideosProcessed + 1\n            : currentStats.numVideosProcessed,\n        numVideosFailed:\n          prevStats.numVideosFailed < currentStats.numVideosFailed\n            ? prevStats.numVideosFailed + 1\n            : currentStats.numVideosFailed,\n      }));\n    }, 10);\n\n    return () => clearInterval(incrementInterval);\n  }, [\n    fetcher.data?.job?.numVideosFound,\n    fetcher.data?.job?.numVideosProcessed,\n    fetcher.data?.job?.numVideosFailed,\n  ]);\n\n  return (\n    <div className=\"flex h-screen flex-col items-center justify-center\">\n      <div className=\"mb-6 flex flex-row items-center justify-center gap-8\">\n        <div className=\"text-3xl font-bold\">Loading</div>\n        <Spinner />\n      </div>\n\n      <div className=\"flex flex-row gap-4\">\n        <div className=\"justif-start flex flex-col\">\n          <div className=\"text-2xl font-bold\">\n            {fetcher.data?.job?.status || \"pending\"}\n          </div>\n          <div className=\"text-2xl font-bold\">\n            {formatNumber(stats.numVideosFound || 0)}\n          </div>\n          <div className=\"text-2xl font-bold\">\n            {formatNumber(stats.numVideosProcessed || 0)}\n          </div>\n          <div className=\"text-2xl font-bold\">\n            {formatNumber(stats.numVideosFailed || 0)}\n          </div>\n        </div>\n        <div className=\"justif-start flex flex-col\">\n          <div className=\"text-2xl\">status</div>\n          <div className=\"text-2xl\">videos found</div>\n          <div className=\"text-2xl\">videos processed</div>\n          <div className=\"text-2xl\">videos with transcripts disabled</div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction formatNumber(num: number) {\n  return num.toLocaleString();\n}\n", "export default function Spinner() {\n  return (\n    <div\n      className=\"inline-block h-8 w-8 animate-spin rounded-full border-4 border-solid border-current border-r-transparent align-[-0.125em] motion-reduce:animate-[spin_1.5s_linear_infinite]\"\n      role=\"status\"\n    >\n      <span className=\"!absolute !-m-px !h-px !w-px !overflow-hidden !whitespace-nowrap !border-0 !p-0 ![clip:rect(0,0,0,0)]\">\n        Loading...\n      </span>\n    </div>\n  );\n}\n", "import { json, LoaderArgs } from \"@remix-run/node\";\nimport { chunk } from \"lodash\";\nimport {\n  createChannel,\n  getChannelByChannelId,\n  updateChannel,\n} from \"~/models/channel.server\";\nimport {\n  getJobByChannelId,\n  updateJobStats,\n  updateJobStatus,\n} from \"~/models/job.server\";\nimport { uploadFile, getVideoS3Key } from \"~/s3.server\";\nimport { getTranscript } from \"~/transcript.server\";\nimport {\n  getChannelData,\n  getChannelVideoCount,\n  getChannelVideos,\n} from \"~/youtube.server\";\nimport {\n  createVideo,\n  getVideosByChannelId as getVideosByChannelIdDb,\n} from \"../models/video.server\";\n\n// TODO: use SQS to queue jobs\n\nexport const loader = async ({ params, request }: LoaderArgs) => {\n  const { channelId } = params;\n  const job = await getJobByChannelId(channelId as string);\n\n  if (!job) {\n    return json({ channelId, job: null, error: \"Job not found\" });\n  }\n\n  await updateJobStatus(job.id, \"initializing\");\n\n  let channel = await getChannelByChannelId(channelId as string);\n\n  if (!channel) {\n    const channelData = await getChannelData(channelId as string);\n    channel = await createChannel({\n      ...channelData,\n      numVideosProcessed: 0,\n    });\n  }\n\n  // check if we already have channel videos, and how many more we need to fetch\n  const numVideos = await getChannelVideoCount(channelId as string);\n  if (numVideos === channel.numVideosProcessed) {\n    await updateJobStatus(job.id, \"completed\");\n    return json({ channelId, job, error: null });\n  }\n\n  await updateJobStatus(job.id, \"searching\");\n\n  let dbVideoIds: string[] = [];\n  if (channel.numVideosProcessed > 0) {\n    const dbVideos = await getVideosByChannelIdDb(channelId as string);\n    dbVideoIds = dbVideos.map((v) => v.videoId);\n  }\n  const channelVideos = await getChannelVideos(channelId as string);\n  const chunkedVideos = chunk(channelVideos, 100);\n\n  await updateJobStatus(job.id, \"processing\");\n\n  let index = 0;\n  let numNoTranscript = 0;\n  let numProcessed = 0;\n  let numCreated = 0;\n  for (const chunk of chunkedVideos) {\n    const promises = chunk.map(async (video) => {\n      try {\n        if (dbVideoIds.includes(video.id)) return;\n\n        const transcript = await getTranscript(video.id);\n        const saveTranscript = uploadFile(\n          Buffer.from(JSON.stringify(transcript)),\n          getVideoS3Key(video.id)\n        );\n        const saveVideoObj = createVideo({\n          videoId: video.id,\n          title: video.title,\n          description: video.description,\n          publishedAt: video.publishedAt,\n          url: video.url,\n          channelId: video.channelId,\n          channelTitle: video.channelTitle,\n          thumbnailUrl: video.thumbnailUrl,\n        });\n        await Promise.all([saveTranscript, saveVideoObj]);\n        numCreated++;\n      } catch (e) {\n        console.log(e);\n\n        numNoTranscript++;\n      } finally {\n        numProcessed++;\n      }\n    });\n    console.log(\"Waiting for chunk \" + index + \" to finish...\");\n    await Promise.allSettled(promises);\n    index++;\n    await updateJobStats(job.id, numProcessed, numCreated, numNoTranscript);\n  }\n  console.log({ numProcessed, numCreated, numNoTranscript });\n  console.log({ channel });\n\n  await updateChannel({\n    ...channel,\n    numVideosProcessed: numProcessed,\n  });\n  await updateJobStatus(job.id, \"completed\");\n  return json({ channelId, job, error: null });\n};\n", "import arc from \"@architect/functions\";\nimport { createId } from \"@paralleldrive/cuid2\";\n\nexport type Channel = {\n  id: string;\n  channelId: string;\n  title: string;\n  description: string;\n  publishedAt: string;\n  numVideosProcessed: number;\n  thumbnailUrl: string;\n  url: string;\n};\n\n//const skToId = (sk: string): string => sk.replace(/^Channel#/, \"\");\n//const idToSk = (id: string): string => `Channel#${id}`;\n\nexport const createChannel = async (channel: Omit<Channel, \"id\">) => {\n  const db = await arc.tables();\n  const id = createId();\n  const result = await db.channel.put({\n    pk: channel.channelId,\n    sk: id,\n    id,\n    ...channel,\n  });\n  return result as Channel;\n};\n\nexport const updateChannel = async (channel: Channel) => {\n  const db = await arc.tables();\n  const result = await db.channel.update({\n    Key: {\n      pk: channel.channelId,\n      sk: channel.id,\n    },\n    UpdateExpression: `\n      SET\n        #title = :title,\n        #description = :description,  \n        #publishedAt = :publishedAt,\n        #numVideosProcessed = :numVideosProcessed,\n        #thumbnailUrl = :thumbnailUrl,\n        #url = :url\n    `,\n    ExpressionAttributeNames: {\n      \"#title\": \"title\",\n      \"#description\": \"description\",\n      \"#publishedAt\": \"publishedAt\",\n      \"#numVideosProcessed\": \"numVideosProcessed\",\n      \"#thumbnailUrl\": \"thumbnailUrl\",\n      \"#url\": \"url\",\n    },\n    ExpressionAttributeValues: {\n      \":title\": channel.title,\n      \":description\": channel.description,\n      \":publishedAt\": channel.publishedAt,\n      \":numVideosProcessed\": channel.numVideosProcessed,\n      \":thumbnailUrl\": channel.thumbnailUrl,\n      \":url\": channel.url,\n    },\n  });\n  return result as Channel;\n};\n\nexport const getChannelByChannelId = async (\n  channelId: string\n): Promise<Channel | undefined> => {\n  const db = await arc.tables();\n  const result = await db.channel.query({\n    KeyConditionExpression: \"pk = :pk\",\n    ExpressionAttributeValues: { \":pk\": channelId },\n  });\n  const [record] = result.Items;\n  if (record) {\n    return {\n      id: record.pk,\n      channelId: record.channelId,\n      title: record.title,\n      description: record.description,\n      publishedAt: record.publishedAt,\n      numVideosProcessed: record.numVideosProcessed,\n      thumbnailUrl: record.thumbnailUrl,\n      url: record.url,\n    };\n  }\n};\n\nexport const getChannels = async (): Promise<Channel[]> => {\n  const db = await arc.tables();\n  const result = await db.channel.scan({});\n  return result.Items.map((record) => ({\n    id: record.pk,\n    channelId: record.channelId,\n    title: record.title,\n    description: record.description,\n    publishedAt: record.publishedAt,\n    numVideosProcessed: record.numVideosProcessed,\n    thumbnailUrl: record.thumbnailUrl,\n    url: record.url,\n  }));\n};\n", "import {\n  GetObjectCommand,\n  PutObjectCommand,\n  S3Client,\n} from \"@aws-sdk/client-s3\";\n\nimport { TranscriptResponse } from \"youtube-transcript\";\n\nconst BUCKET_NAME = \"yt-search-transcript-segments\";\n\nconst s3 = new S3Client({\n  region: \"us-east-1\",\n  credentials: {\n    accessKeyId: process.env.S3_AWS_ACCESS_KEY_ID as string,\n    secretAccessKey: process.env.S3_AWS_SECRET_ACCESS_KEY as string,\n  },\n});\n\nexport async function getTranscriptS3(\n  videoId: string\n): Promise<TranscriptResponse[]> {\n  const key = getVideoS3Key(videoId);\n  return getFile(key);\n}\n\nexport async function uploadFile(file: Buffer, key: string) {\n  const command = new PutObjectCommand({\n    Bucket: BUCKET_NAME,\n    Key: key,\n    Body: file,\n  });\n  return s3.send(command);\n}\n\nexport async function getFile(key: string) {\n  const command = new GetObjectCommand({\n    Bucket: BUCKET_NAME,\n    Key: key,\n  });\n  const result = await s3.send(command);\n  const body = await result.Body!.transformToString();\n  return JSON.parse(body);\n}\n\nexport async function getFiles(keys: string[]) {\n  return Promise.all(keys.map((key) => getFile(key)));\n}\n\nexport function getVideoS3Key(videoId: string) {\n  return `video-${videoId}`;\n}\n", "import { TranscriptResponse, YoutubeTranscript } from \"youtube-transcript\";\n\nexport interface SearchResult {\n  matches: [];\n  numResults: number;\n  searchText: string;\n  video: {\n    id: string;\n    url: string;\n    publishedAt: Date;\n    title: string;\n    description: string;\n  };\n}\n\nexport interface TextSegment {\n  id: string;\n  iStart: number;\n  iEnd: number;\n  text: string;\n  originalText: string;\n  start: number;\n  duration: number;\n  textPreceding: string[];\n  textFollowing: string[];\n}\n\nexport interface TextMatch {\n  id: string;\n  precedingText: string;\n  exactText: string;\n  followingText: string;\n  startSeconds: number;\n  endSeconds: number;\n  startSecondsFormatted: string;\n}\n\nexport async function getTranscript(\n  videoId: string\n): Promise<TranscriptResponse[]> {\n  const transcript = await YoutubeTranscript.fetchTranscript(videoId, {\n    lang: \"en\",\n  });\n  return transcript;\n}\n\nexport function processTranscript(\n  rawSegments: TranscriptResponse[],\n  numBookends = 1\n) {\n  const segments: TextSegment[] = [];\n  let fullText = \"\";\n  let charIndex = 0;\n\n  rawSegments.forEach((segment, index) => {\n    let textPreceding: string[] = [];\n    let textFollowing: string[] = [];\n    // add space to preserve word boundaries\n    const text = segment.text + \" \";\n    const textLower = text.toLowerCase();\n    const iEnd = charIndex + text.length;\n\n    // add some text on either end of the matching text for context\n    if (index >= numBookends) {\n      const preceding = rawSegments.slice(index - numBookends, index);\n      textPreceding = preceding.map((s) => s.text);\n    }\n\n    if (index < rawSegments.length - numBookends) {\n      const following = rawSegments.slice(index + 1, index + numBookends + 1);\n      textFollowing = following.map((s) => s.text);\n    }\n\n    segments.push({\n      id: index.toString(),\n      text: textLower,\n      originalText: text,\n      duration: segment.duration / 1000,\n      start: segment.offset / 1000,\n      iStart: charIndex,\n      iEnd,\n      textPreceding,\n      textFollowing,\n    });\n\n    fullText += textLower;\n    charIndex = iEnd;\n  });\n\n  return { segments, fullText };\n}\n\nexport function searchTranscript(\n  fullText: string,\n  textSegments: TextSegment[],\n  searchText: string\n) {\n  const matches: TextMatch[] = [];\n  const indexes = getMatchedIndexes(fullText, searchText.toLowerCase());\n\n  let id = 0;\n  for (let [iStart, iEnd] of indexes) {\n    id += 1;\n    const matchingSegments = [];\n\n    for (const segment of textSegments) {\n      if (iStart === segment.iEnd) {\n        iStart += 1;\n      }\n\n      if (\n        (segment.iStart <= iStart && iStart <= segment.iEnd) ||\n        (segment.iStart <= iEnd && iEnd <= segment.iEnd)\n      ) {\n        matchingSegments.push(segment);\n      }\n    }\n    const match = buildMatch(id.toString(), searchText, matchingSegments);\n    matches.push(match);\n  }\n  return matches;\n}\n\nfunction getMatchedIndexes(\n  text: string,\n  searchText: string\n): [number, number][] {\n  const regex = new RegExp(searchText, \"g\");\n  const matches = [];\n\n  let match;\n  while ((match = regex.exec(text)) !== null) {\n    matches.push(match);\n  }\n\n  return matches.map((m) => [m.index, m.index + m[0].length]);\n}\n\nfunction buildMatch(\n  id: string,\n  searchText: string,\n  segments: TextSegment[]\n): TextMatch {\n  const firstSegment = segments[0];\n  const lastSegment = segments[segments.length - 1];\n  const precedingText = firstSegment.textPreceding.join(\"\").trim();\n  const followingText = lastSegment.textFollowing.join(\"\").trim();\n  const mainTextLower = segments\n    .map((x) => x.text)\n    .join(\"\")\n    .trim();\n  const mainTextOriginal = segments\n    .map((x) => x.originalText)\n    .join(\"\")\n    .trim();\n  const fullText = `${precedingText} ${mainTextLower} ${followingText}`;\n  const fullTextOriginal = `${precedingText} ${mainTextOriginal} ${followingText}`;\n\n  // find indexes of the search text in the full text, with lowercase matching\n  const indexes = getMatchedIndexes(fullText, searchText.toLowerCase());\n\n  // split the text into preceding, exact matching, and following from\n  // the original text\n  const preceding = fullTextOriginal.substring(0, indexes[0][0]);\n  const exact = fullTextOriginal.substring(indexes[0][0], indexes[0][1]);\n  const following = fullTextOriginal.substring(indexes[0][1]);\n\n  return {\n    id,\n    precedingText: preceding.trim(),\n    exactText: exact.trim(),\n    followingText: following.trim(),\n\n    // add 2 second buffer as lead-in\n    startSeconds: Math.floor(firstSegment.start) - 2,\n    endSeconds: Math.floor(lastSegment.start + lastSegment.duration),\n    startSecondsFormatted: formatTime(firstSegment.start),\n  };\n}\n\nfunction formatTime(time: number): string {\n  const formatted: string = new Date(time * 1000).toISOString().substr(11, 8);\n  // remove milliseconds\n  return formatted.split(\".\")[0];\n}\n", "const MAX_RESULTS = 50;\nconst YOUTUBE_API_KEY = process.env.YOUTUBE_API_KEY;\n\nexport interface Video {\n  id: string;\n  channelId: string;\n  channelTitle: string;\n  title: string;\n  description: string;\n  publishedAt: string;\n  url: string;\n  thumbnailUrl: string;\n}\n\nexport async function getVideoById(videoId: string): Promise<Video> {\n  const url = `https://www.googleapis.com/youtube/v3/videos?part=snippet&id=${videoId}&key=${YOUTUBE_API_KEY}`;\n  const response = await fetch(url);\n  const data = await response.json();\n  const video = data.items[0];\n  return {\n    id: video.id,\n    channelId: video.snippet.channelId,\n    channelTitle: video.snippet.channelTitle,\n    title: video.snippet.title,\n    description: video.snippet.description,\n    publishedAt: video.snippet.publishedAt,\n    url: `https://www.youtube.com/watch?v=${video.id}`,\n    thumbnailUrl: video.snippet.thumbnails.high.url,\n  };\n}\n\nexport async function getVideosFromPlaylistId(\n  playlistId: string,\n  pageToken: string | undefined\n): Promise<{ videos: Video[]; nextPageToken: string | undefined }> {\n  let url = `https://www.googleapis.com/youtube/v3/playlistItems?part=snippet&maxResults=${MAX_RESULTS}&playlistId=${playlistId}&key=${YOUTUBE_API_KEY}`;\n\n  if (pageToken) {\n    url += `&pageToken=${pageToken}`;\n  }\n\n  const response = await fetch(url);\n  const dataJson = await response.json();\n  const data = dataJson.items;\n  const videos: Video[] = data.map((item: any) => ({\n    id: item.snippet.resourceId.videoId,\n    channelId: item.snippet.channelId,\n    channelTitle: item.snippet.channelTitle,\n    title: item.snippet.title,\n    description: item.snippet.description,\n    publishedAt: item.snippet.publishedAt,\n    url: `https://www.youtube.com/watch?v=${item.snippet.resourceId.videoId}`,\n    thumbnailUrl: item.snippet.thumbnails.high.url,\n  }));\n  const nextPageToken = dataJson.nextPageToken as string | undefined;\n  return { videos, nextPageToken };\n}\n\nexport async function getChannelVideos(channelName: string) {\n  let response: { videos: any[]; nextPageToken: string | undefined };\n  let pageToken: string | undefined = undefined;\n  const channelVideos: Video[] = [];\n  const playlistId = channelName.replace(\"UC\", \"UU\");\n\n  while (true) {\n    response = await getVideosFromPlaylistId(playlistId, pageToken);\n    const { videos, nextPageToken } = response;\n    channelVideos.push(...videos);\n    pageToken = nextPageToken;\n    if (!nextPageToken) {\n      break;\n    }\n  }\n  return channelVideos;\n}\n\nexport async function getChannelIdFromUrl(url: string) {\n  try {\n    const response = await fetch(url);\n    const data = await response.text();\n    const arr = data.split(\"channel_id=\");\n    const channelId = arr[1].slice(0, 24);\n\n    return channelId;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function getChannelVideoCount(channelId: string) {\n  const url = `https://www.googleapis.com/youtube/v3/channels?part=statistics&id=${channelId}&key=${YOUTUBE_API_KEY}`;\n  const response = await fetch(url);\n  const data = await response.json();\n  const videoCount = data.items[0].statistics.videoCount;\n  return videoCount;\n}\n\nexport async function getChannelData(channelId: string): Promise<{\n  channelId: string;\n  title: string;\n  description: string;\n  publishedAt: string;\n  thumbnailUrl: string;\n  url: string;\n}> {\n  const url = `https://www.googleapis.com/youtube/v3/channels?part=snippet&id=${channelId}&key=${YOUTUBE_API_KEY}`;\n  const response = await fetch(url);\n  const data = await response.json();\n  const channelData = data.items[0];\n  return {\n    channelId: channelData.id,\n    title: channelData.snippet.title,\n    description: channelData.snippet.description,\n    publishedAt: channelData.snippet.publishedAt,\n    thumbnailUrl: channelData.snippet.thumbnails.high.url,\n    url: `https://www.youtube.com/channel/${channelData.id}`,\n  };\n}\n", "import arc from \"@architect/functions\";\nimport { createId } from \"@paralleldrive/cuid2\";\n\nexport type Video = {\n  videoId: string;\n  channelId: string;\n  channelTitle: string;\n  title: string;\n  description: string;\n  publishedAt: string;\n  thumbnailUrl: string;\n  url: string;\n};\n\nconst skToId = (sk: string): string => sk.replace(/^Video#/, \"\");\n//const idToSk = (id: string): string => `Video#${id}`;\n\nexport const createVideo = async (video: Video): Promise<void> => {\n  const db = await arc.tables();\n  await db.video.put({\n    pk: video.videoId,\n    sk: skToId(createId()),\n    ...video,\n  });\n};\n\nexport const getVideoByVideoId = async (\n  videoId: string\n): Promise<Video | undefined> => {\n  const db = await arc.tables();\n  const result = await db.video.query({\n    KeyConditionExpression: \"pk = :pk\",\n    ExpressionAttributeValues: { \":pk\": videoId },\n  });\n  const [record] = result.Items;\n  if (record) {\n    return {\n      videoId: record.pk,\n      channelId: record.channelId,\n      channelTitle: record.channelTitle,\n      title: record.title,\n      description: record.description,\n      publishedAt: record.publishedAt,\n      thumbnailUrl: record.thumbnailUrl,\n      url: record.url,\n    };\n  }\n};\n\n// TODO: Dont use an index, use pk = channelId and sk = videoId\n// since we look up the video now and get the channelId\nexport const getVideosByChannelId = async (\n  channelId: string\n): Promise<Video[]> => {\n  const db = await arc.tables();\n  const result = await db.video.query({\n    IndexName: \"byChannelId\",\n    KeyConditionExpression: \"channelId = :cId\",\n    ExpressionAttributeValues: {\n      \":cId\": channelId,\n    },\n  });\n\n  return result.Items as Video[];\n};\n", "import type { ActionArgs, LoaderArgs } from \"@remix-run/node\";\nimport { json, redirect } from \"@remix-run/node\";\nimport {\n  Form,\n  isRouteErrorResponse,\n  useLoaderData,\n  useRouteError,\n} from \"@remix-run/react\";\nimport invariant from \"tiny-invariant\";\n\nimport { deleteNote, getNote } from \"~/models/note.server\";\nimport { requireUserId } from \"~/session.server\";\n\nexport const loader = async ({ params, request }: LoaderArgs) => {\n  const userId = await requireUserId(request);\n  invariant(params.noteId, \"noteId not found\");\n\n  const note = await getNote({ id: params.noteId, userId });\n  if (!note) {\n    throw new Response(\"Not Found\", { status: 404 });\n  }\n  return json({ note });\n};\n\nexport const action = async ({ params, request }: ActionArgs) => {\n  const userId = await requireUserId(request);\n  invariant(params.noteId, \"noteId not found\");\n\n  await deleteNote({ id: params.noteId, userId });\n\n  return redirect(\"/notes\");\n};\n\nexport default function NoteDetailsPage() {\n  const data = useLoaderData<typeof loader>();\n\n  return (\n    <div>\n      <h3 className=\"text-2xl font-bold\">{data.note.title}</h3>\n      <p className=\"py-6\">{data.note.body}</p>\n      <hr className=\"my-4\" />\n      <Form method=\"post\">\n        <button\n          type=\"submit\"\n          className=\"rounded bg-blue-500 px-4 py-2 text-white hover:bg-blue-600 focus:bg-blue-400\"\n        >\n          Delete\n        </button>\n      </Form>\n    </div>\n  );\n}\n\nexport function ErrorBoundary() {\n  const error = useRouteError();\n\n  if (error instanceof Error) {\n    return <div>An unexpected error occurred: {error.message}</div>;\n  }\n\n  if (!isRouteErrorResponse(error)) {\n    return <h1>Unknown Error</h1>;\n  }\n\n  if (error.status === 404) {\n    return <div>Note not found</div>;\n  }\n\n  return <div>An unexpected error occurred: {error.statusText}</div>;\n}\n", "import arc from \"@architect/functions\";\nimport { createId } from \"@paralleldrive/cuid2\";\n\nimport type { User } from \"./user.server\";\n\nexport type Note = {\n  id: ReturnType<typeof createId>;\n  userId: User[\"id\"];\n  title: string;\n  body: string;\n};\n\ntype NoteItem = {\n  pk: User[\"id\"];\n  sk: `note#${Note[\"id\"]}`;\n};\n\nconst skToId = (sk: NoteItem[\"sk\"]): Note[\"id\"] => sk.replace(/^note#/, \"\");\nconst idToSk = (id: Note[\"id\"]): NoteItem[\"sk\"] => `note#${id}`;\n\nexport async function getNote({\n  id,\n  userId,\n}: Pick<Note, \"id\" | \"userId\">): Promise<Note | null> {\n  const db = await arc.tables();\n\n  const result = await db.note.get({ pk: userId, sk: idToSk(id) });\n\n  if (result) {\n    return {\n      userId: result.pk,\n      id: result.sk,\n      title: result.title,\n      body: result.body,\n    };\n  }\n  return null;\n}\n\nexport async function getNoteListItems({\n  userId,\n}: Pick<Note, \"userId\">): Promise<Array<Pick<Note, \"id\" | \"title\">>> {\n  const db = await arc.tables();\n\n  const result = await db.note.query({\n    KeyConditionExpression: \"pk = :pk\",\n    ExpressionAttributeValues: { \":pk\": userId },\n  });\n\n  return result.Items.map((n: any) => ({\n    title: n.title,\n    id: skToId(n.sk),\n  }));\n}\n\nexport async function createNote({\n  body,\n  title,\n  userId,\n}: Pick<Note, \"body\" | \"title\" | \"userId\">): Promise<Note> {\n  const db = await arc.tables();\n\n  const result = await db.note.put({\n    pk: userId,\n    sk: idToSk(createId()),\n    title: title,\n    body: body,\n  });\n  return {\n    id: skToId(result.sk),\n    userId: result.pk,\n    title: result.title,\n    body: result.body,\n  };\n}\n\nexport async function deleteNote({ id, userId }: Pick<Note, \"id\" | \"userId\">) {\n  const db = await arc.tables();\n  return db.note.delete({ pk: userId, sk: idToSk(id) });\n}\n", "import { Link } from \"@remix-run/react\";\n\nexport default function NoteIndexPage() {\n  return (\n    <p>\n      No note selected. Select a note on the left, or{\" \"}\n      <Link to=\"new\" className=\"text-blue-500 underline\">\n        create a new note.\n      </Link>\n    </p>\n  );\n}\n", "import type { ActionArgs } from \"@remix-run/node\";\nimport { json, redirect } from \"@remix-run/node\";\nimport { Form, useActionData } from \"@remix-run/react\";\nimport { useEffect, useRef } from \"react\";\n\nimport { createNote } from \"~/models/note.server\";\nimport { requireUserId } from \"~/session.server\";\n\nexport const action = async ({ request }: ActionArgs) => {\n  const userId = await requireUserId(request);\n\n  const formData = await request.formData();\n  const title = formData.get(\"title\");\n  const body = formData.get(\"body\");\n\n  if (typeof title !== \"string\" || title.length === 0) {\n    return json(\n      { errors: { body: null, title: \"Title is required\" } },\n      { status: 400 }\n    );\n  }\n\n  if (typeof body !== \"string\" || body.length === 0) {\n    return json(\n      { errors: { body: \"Body is required\", title: null } },\n      { status: 400 }\n    );\n  }\n\n  const note = await createNote({ body, title, userId });\n\n  return redirect(`/notes/${note.id}`);\n};\n\nexport default function NewNotePage() {\n  const actionData = useActionData<typeof action>();\n  const titleRef = useRef<HTMLInputElement>(null);\n  const bodyRef = useRef<HTMLTextAreaElement>(null);\n\n  useEffect(() => {\n    if (actionData?.errors?.title) {\n      titleRef.current?.focus();\n    } else if (actionData?.errors?.body) {\n      bodyRef.current?.focus();\n    }\n  }, [actionData]);\n\n  return (\n    <Form\n      method=\"post\"\n      style={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        gap: 8,\n        width: \"100%\",\n      }}\n    >\n      <div>\n        <label className=\"flex w-full flex-col gap-1\">\n          <span>Title: </span>\n          <input\n            ref={titleRef}\n            name=\"title\"\n            className=\"flex-1 rounded-md border-2 border-blue-500 px-3 text-lg leading-loose\"\n            aria-invalid={actionData?.errors?.title ? true : undefined}\n            aria-errormessage={\n              actionData?.errors?.title ? \"title-error\" : undefined\n            }\n          />\n        </label>\n        {actionData?.errors?.title ? (\n          <div className=\"pt-1 text-red-700\" id=\"title-error\">\n            {actionData.errors.title}\n          </div>\n        ) : null}\n      </div>\n\n      <div>\n        <label className=\"flex w-full flex-col gap-1\">\n          <span>Body: </span>\n          <textarea\n            ref={bodyRef}\n            name=\"body\"\n            rows={8}\n            className=\"w-full flex-1 rounded-md border-2 border-blue-500 px-3 py-2 text-lg leading-6\"\n            aria-invalid={actionData?.errors?.body ? true : undefined}\n            aria-errormessage={\n              actionData?.errors?.body ? \"body-error\" : undefined\n            }\n          />\n        </label>\n        {actionData?.errors?.body ? (\n          <div className=\"pt-1 text-red-700\" id=\"body-error\">\n            {actionData.errors.body}\n          </div>\n        ) : null}\n      </div>\n\n      <div className=\"text-right\">\n        <button\n          type=\"submit\"\n          className=\"rounded bg-blue-500 px-4 py-2 text-white hover:bg-blue-600 focus:bg-blue-400\"\n        >\n          Save\n        </button>\n      </div>\n    </Form>\n  );\n}\n", "import { json, LoaderArgs, redirect } from \"@remix-run/node\";\nimport { Link, useLoaderData } from \"@remix-run/react\";\nimport { getVideosByChannelId } from \"~/models/video.server\";\n\nimport { searchChannelFromDb } from \"~/search.server\";\nimport { TextMatch } from \"~/transcript.server\";\nimport { getChannelIdFromUrl, Video } from \"~/youtube.server\";\n\nexport const loader = async ({ request }: LoaderArgs) => {\n  const params = new URL(request.url).searchParams;\n  const channelUrl = params.get(\"channelUrl\");\n  const channelId = params.get(\"channelId\");\n  const searchText = params.get(\"text\");\n\n  if (channelUrl) {\n    const channelId = await getChannelIdFromUrl(channelUrl);\n    return redirect(`/channel?channelId=${channelId}&text=${searchText}`);\n  }\n\n  const videos = await getVideosByChannelId(channelId as string);\n  const results = (await searchChannelFromDb(videos, searchText as string)).map(\n    (r) => {\n      return {\n        video: {\n          ...r.video,\n          formattedDate: formatDate(r.video.publishedAt),\n        },\n        matches: r.matches,\n      };\n    }\n  );\n\n  // sort results by date\n  const sortedResults = results.sort((a, b) => {\n    return (\n      new Date(b.video.publishedAt).getTime() -\n      new Date(a.video.publishedAt).getTime()\n    );\n  });\n\n  const channelName = videos[0]?.channelTitle || \"\";\n  return json({ channelId, channelName, searchText, results: sortedResults });\n};\n\nexport default function ChannelResultsPage() {\n  const { results, searchText, channelName } = useLoaderData<typeof loader>();\n\n  return (\n    <>\n      {results.length > 0 && (\n        <div className=\"ml-6 mt-6 text-2xl font-bold\">\n          {results[0].video?.channelTitle}\n        </div>\n      )}\n      <ResultsText\n        numResults={results.length}\n        searchText={searchText as string}\n        channelName={channelName as string}\n      />\n      <div className=\"flex h-screen flex-row flex-wrap justify-evenly gap-4\">\n        {results.map(({ video, matches }, index) => (\n          <Card\n            key={`video-card-${video.id}-${index}`}\n            video={video}\n            matches={matches}\n            searchText={searchText as string}\n          />\n        ))}\n      </div>\n    </>\n  );\n}\n\nfunction Card({\n  video,\n  matches,\n  searchText,\n}: {\n  video: Video & { formattedDate: string };\n  matches: TextMatch[];\n  searchText: string;\n}) {\n  const shortDescription = video.description.slice(0, 100);\n  const description =\n    shortDescription.length < video.description.length\n      ? `${shortDescription}...`\n      : shortDescription;\n\n  return (\n    <Link to={`/video?id=${video.id}&text=${searchText}`}>\n      <div className=\"h-full max-w-sm rounded shadow-lg\">\n        <img\n          className=\"w-full\"\n          src={video.thumbnailUrl}\n          alt=\"Sunset in the mountains\"\n        />\n        <div className=\"px-6 py-4\">\n          <div className=\"mb-2 text-xl font-bold\">{video.title}</div>\n          <p className=\"text-base text-gray-700\">{description}</p>\n        </div>\n        <div className=\"flex flex-row justify-between px-6 pb-2 pt-4\">\n          <div className=\"mb-2 mr-2 inline-block rounded-full bg-gray-200 px-3 py-1 text-sm font-semibold text-gray-700\">\n            {`${matches.length} matches`}\n          </div>\n          <div>{video.formattedDate}</div>\n        </div>\n      </div>\n    </Link>\n  );\n}\n\nfunction ResultsText({\n  numResults,\n  searchText,\n}: {\n  numResults: number;\n  searchText: string;\n  channelName: string;\n}) {\n  if (numResults > 0) {\n    return (\n      <h2 className=\"m-6 text-2xl underline\">\n        {numResults} results found for\n        <span className=\"font-bold italic\"> \"{searchText}\" </span>\n      </h2>\n    );\n  }\n  return (\n    <h2 className=\"m-6 text-2xl underline\">\n      No results found for\n      <span className=\"font-bold italic\"> \"{searchText}\" </span>\n    </h2>\n  );\n}\n\nfunction formatDate(date: Date | string) {\n  return new Date(date).toLocaleDateString(\"en-US\", {\n    month: \"long\",\n    day: \"numeric\",\n    year: \"numeric\",\n  });\n}\n", "import { chunk } from \"lodash\";\nimport {\n  getTranscript,\n  processTranscript,\n  searchTranscript,\n  TextMatch,\n} from \"./transcript.server\";\nimport {\n  createVideo,\n  Video as DbVideo,\n  getVideoByVideoId as getVideoByVideoIdDb,\n  getVideosByChannelId as getVideosByChannelIdDb,\n} from \"./models/video.server\";\nimport {\n  getChannelIdFromUrl,\n  getChannelVideoCount,\n  getChannelVideos,\n  getVideoById,\n  Video,\n} from \"./youtube.server\";\nimport { getTranscriptS3, getVideoS3Key, uploadFile } from \"./s3.server\";\nimport { TranscriptResponse } from \"youtube-transcript\";\n\nexport async function searchVideo(videoId: string, searchText: string) {\n  try {\n    const videoDb = await getVideoByVideoIdDb(videoId);\n\n    let video: Video, transcript: TranscriptResponse[];\n    if (videoDb) {\n      transcript = await getTranscriptS3(videoId);\n      video = {\n        id: videoDb.videoId,\n        ...videoDb,\n      };\n    } else {\n      video = await getVideoById(videoId);\n      transcript = await getTranscript(videoId);\n\n      const saveTranscript = uploadFile(\n        Buffer.from(JSON.stringify(transcript)),\n        getVideoS3Key(videoId)\n      );\n      const saveVideoObj = createVideo({\n        videoId,\n        title: video.title,\n        description: video.description,\n        publishedAt: video.publishedAt,\n        url: video.url,\n        channelId: video.channelId,\n        channelTitle: video.channelTitle,\n        thumbnailUrl: video.thumbnailUrl,\n      });\n      await Promise.all([saveTranscript, saveVideoObj]);\n    }\n\n    console.log(videoDb ? \"from db\" : \"from youtube\");\n    const { segments, fullText } = processTranscript(transcript);\n    const matches = searchTranscript(fullText, segments, searchText);\n    return { matches, video };\n  } catch (e) {\n    console.log(e);\n    return { matches: [], video: null };\n  }\n}\n\nexport async function searchChannel(channelUrl: string, searchText: string) {\n  let results: { video: Video; matches: TextMatch[] }[] = [];\n  const channelName = await getChannelIdFromUrl(channelUrl);\n\n  console.log({ channelName });\n\n  const [channelVideosDb, videoCount] = await Promise.all([\n    getVideosByChannelIdDb(channelName as string),\n    getChannelVideoCount(channelName as string),\n  ]);\n\n  const haveMostVideos = channelVideosDb.length > videoCount * 0.8;\n\n  if (haveMostVideos) {\n    // map videos to transcript files from S3 and return matches\n    results = await searchChannelFromDb(channelVideosDb, searchText);\n  } else {\n    // get videos from youtube and save to db\n    console.log(\"Getting channel videos...\");\n    const channelVideos = await getChannelVideos(channelName as string);\n    const chunkedVideos = chunk(channelVideos, 100);\n    console.log(channelVideos.length + \" videos found\");\n\n    console.log(\"Getting and processing transcripts...\");\n\n    let index = 0;\n    results = [];\n    for (const videoChunk of chunkedVideos) {\n      const promises = videoChunk.map(async (video) => {\n        try {\n          const transcript = await getTranscript(video.id);\n          const { segments, fullText } = processTranscript(transcript);\n          const saveTranscript = uploadFile(\n            Buffer.from(JSON.stringify(transcript)),\n            getVideoS3Key(video.id)\n          );\n          const saveVideoObj = createVideo({\n            videoId: video.id,\n            title: video.title,\n            description: video.description,\n            publishedAt: video.publishedAt,\n            url: video.url,\n            channelId: video.channelId,\n            channelTitle: video.channelTitle,\n            thumbnailUrl: video.thumbnailUrl,\n          });\n          await Promise.all([saveTranscript, saveVideoObj]);\n          results.push({\n            video,\n            matches: searchTranscript(fullText, segments, searchText),\n          });\n        } catch (e) {\n          console.log(e);\n        }\n      });\n      console.log(\"Waiting for chunk \" + index + \" to finish...\");\n      await Promise.all(promises);\n      index++;\n    }\n  }\n  console.log(channelVideosDb.length > 0 ? \"from db\" : \"from youtube\");\n  return results.filter((r) => r.matches.length > 0);\n}\n\nexport async function searchChannelFromDb(\n  channelVideosDb: DbVideo[],\n  searchText: string\n) {\n  let results: { video: Video; matches: TextMatch[] }[] = [];\n  const chunkedVideos = chunk(channelVideosDb, 100);\n\n  for (const videoChunk of chunkedVideos) {\n    const promises = videoChunk.map(async (video) => {\n      try {\n        const transcript = await getTranscriptS3OrYt(video.videoId);\n        const { segments, fullText } = processTranscript(transcript);\n        return {\n          video: {\n            id: video.videoId,\n            ...video,\n          },\n          matches: searchTranscript(fullText, segments, searchText),\n        };\n      } catch (e) {\n        console.log(e);\n        return {\n          video: {\n            id: video.videoId,\n            ...video,\n          },\n          matches: [],\n        };\n      }\n    });\n    results = results.concat(await Promise.all(promises));\n  }\n  return results.filter((r) => r.matches.length > 0);\n}\n\n// get transcript from s3. if not found, get from youtube and save to s3\nexport async function getTranscriptS3OrYt(videoId: string) {\n  try {\n    return await getTranscriptS3(videoId);\n  } catch (e) {\n    const transcript = await getTranscript(videoId);\n    await uploadFile(\n      Buffer.from(JSON.stringify(transcript)),\n      getVideoS3Key(videoId)\n    );\n    return transcript;\n  }\n}\n", "import { ActionArgs, json, redirect, V2_MetaFunction } from \"@remix-run/node\";\nimport { Form } from \"@remix-run/react\";\nimport { useState } from \"react\";\nimport { getChannelIdFromUrl } from \"~/youtube.server\";\n\n//import { useOptionalUser } from \"~/utils\";\n\nexport const meta: V2_MetaFunction = () => [{ title: \"Lingua Lighthouse\" }];\n\nexport const action = async ({ request }: ActionArgs) => {\n  const body = await request.formData();\n\n  const videoOrChannelUrl = body.get(\"videoUrl\");\n  const searchText = body.get(\"searchText\");\n  const searchType = body.get(\"searchType\");\n\n  if (!videoOrChannelUrl || !searchText || !searchType) {\n    return json({ error: \"Missing required fields\" }, { status: 400 });\n  }\n\n  if (searchType === \"channel\") {\n    const channelId = await getChannelIdFromUrl(videoOrChannelUrl as string);\n    return redirect(`/jobs/${channelId}/${searchText}`);\n  }\n  return redirect(`/${searchType}?id=${videoOrChannelUrl}&text=${searchText}`);\n};\n\nexport default function Index() {\n  //const user = useOptionalUser();\n\n  const [videoId, setVideoId] = useState(\"\");\n  const [text, setText] = useState(\"\");\n  const [searchType, setSearchType] = useState<\"video\" | \"channel\">(\"video\");\n  const isDisabled = videoId.length < 5 || text.length < 4;\n\n  return (\n    <div className=\"flex h-full flex-col justify-around\">\n      <h1 className=\"text-center text-4xl\">\n        Search for text in a youtube {searchType}\n      </h1>\n      <div className=\"flex justify-center px-4\">\n        <Form method=\"post\" className=\"flex w-full flex-col gap-y-4 md:w-3/4\">\n          {searchType === \"channel\" && <Warning />}\n          <select\n            name=\"searchType\"\n            className=\"focus:shadow-outline w-full rounded border px-3 py-2 leading-tight text-gray-700 shadow focus:outline-none\"\n            onChange={(e) => setSearchType(e.target.value as any)}\n            value={searchType}\n          >\n            <option value=\"video\">Video</option>\n            <option value=\"channel\">Entire channel</option>\n          </select>\n\n          <Input\n            id=\"video_id\"\n            name=\"videoUrl\"\n            placeholder={`Youtube ${searchType} url`}\n            value={videoId}\n            onInput={(e: any) => setVideoId(e.target.value)}\n          />\n          <Input\n            id=\"text\"\n            name=\"searchText\"\n            placeholder=\"Text to search for\"\n            value={text}\n            onInput={(e: any) => setText(e.target.value)}\n          />\n          <button\n            disabled={isDisabled}\n            className={`focus:shadow-outline rounded ${\n              isDisabled ? \"bg-blue-100\" : \"bg-blue-500 hover:bg-blue-700\"\n            } px-4 py-2 font-bold text-white focus:outline-none`}\n            type=\"submit\"\n          >\n            Search\n          </button>\n        </Form>\n      </div>\n    </div>\n  );\n}\n\nfunction Input({\n  id,\n  name,\n  placeholder,\n  value,\n  onInput,\n}: {\n  id: string;\n  name: string;\n  placeholder: string;\n  value: string;\n  onInput: (e: any) => void;\n}) {\n  return (\n    <input\n      className=\"focus:shadow-outline w-full appearance-none rounded border px-3 py-2 leading-tight text-gray-700 shadow focus:outline-none\"\n      id={id}\n      name={name}\n      value={value}\n      type=\"text\"\n      placeholder={placeholder}\n      onInput={onInput}\n    />\n  );\n}\n\nfunction Warning() {\n  return (\n    <div className=\"flex flex-col gap-2\">\n      <div className=\"border-l-4 border-yellow-500 bg-yellow-100 p-4 text-yellow-700\">\n        <p className=\"font-bold\">\n          Searching a whole channel may take a few minutes. Would you like to be\n          notified when the search is complete?\n        </p>\n      </div>\n      {/* radio buttons */}\n      <div className=\"flex flex-col gap-2\">\n        <label className=\"inline-flex items-center\">\n          <input type=\"radio\" className=\"form-radio\" name=\"radio\" value=\"1\" />\n          <span className=\"ml-2\">Yes, send me an email when it's complete</span>\n        </label>\n        <label className=\"inline-flex items-center\">\n          <input type=\"radio\" className=\"form-radio\" name=\"radio\" value=\"2\" />\n          <span className=\"ml-2\">No, I'll wait</span>\n        </label>\n      </div>\n    </div>\n  );\n}\n", "import type { ActionArgs } from \"@remix-run/node\";\nimport { redirect } from \"@remix-run/node\";\n\nimport { logout } from \"~/session.server\";\n\nexport const action = async ({ request }: ActionArgs) => logout(request);\n\nexport const loader = async () => redirect(\"/\");\n", "export default function AboutPage() {\n  return (\n    <div className=\"mx-6 my-8 flex flex-col gap-4 pb-16\">\n      <p className=\"text-xl font-bold\">Welcome to Lingua Lighthouse!</p>\n\n      <p className=\"text-lg\">\n        At Lingua Lighthouse, we believe that language should never be a barrier\n        to accessing valuable content. Our web application is designed to\n        empower users like you to search for specific text spoken in YouTube\n        videos or entire channels effortlessly. Whether you're looking for a\n        particular phrase, a specific topic, or just trying to find relevant\n        information within a vast collection of videos, Lingua Lighthouse is\n        here to guide you.\n      </p>\n\n      <p className=\"text-lg\">\n        Our user-friendly interface allows you to enter either the channel URL\n        or video URL along with your desired search text. Once you hit search,\n        Lingua Lighthouse's advanced algorithms dive into the spoken content of\n        the videos, searching for your specified text. Our innovative technology\n        utilizes speech recognition and natural language processing techniques\n        to analyze the audio and transcribe it into searchable text. This way,\n        you can easily locate the exact moments in videos where your desired\n        text is spoken, saving you time and effort.\n      </p>\n\n      <p className=\"text-lg\">\n        Whether you're a student looking for specific information in educational\n        videos, a language learner trying to understand pronunciation and usage,\n        or a content creator searching for specific clips in your own videos,\n        Lingua Lighthouse is the perfect tool for you. We cater to a wide range\n        of users and offer a comprehensive solution to make your search process\n        seamless.\n      </p>\n\n      <p className=\"text-lg font-bold\">Key Features of Lingua Lighthouse:</p>\n\n      <ol className=\"list-decimal pl-8\">\n        <li className=\"text-lg\">\n          Efficient Search: Our powerful search engine scours through the spoken\n          content of YouTube videos, helping you find the information you need\n          quickly and accurately.\n        </li>\n        <li className=\"text-lg\">\n          Flexible Search Options: You have the flexibility to search either an\n          entire YouTube channel or a specific video. Simply provide the channel\n          URL or video URL along with your search text, and let Lingua\n          Lighthouse handle the rest.\n        </li>\n        <li className=\"text-lg\">\n          Precise Results: Lingua Lighthouse highlights the exact moments in\n          videos where your desired text is spoken, ensuring you find the\n          relevant information you're looking for with precision.\n        </li>\n        <li className=\"text-lg\">\n          User-Friendly Interface: Our intuitive interface makes it easy for\n          anyone to navigate and use the Lingua Lighthouse web application. You\n          don't need to be tech-savvy to access the valuable content you seek.\n        </li>\n        <li className=\"text-lg\">\n          Time-Saving: No more scrolling through lengthy videos or relying on\n          manual transcription. Lingua Lighthouse streamlines the search\n          process, saving you time and energy.\n        </li>\n      </ol>\n\n      <p className=\"text-lg\">\n        We at Lingua Lighthouse are passionate about breaking language barriers\n        and providing users with an effective tool to explore the vast world of\n        YouTube videos. We continuously strive to enhance our platform,\n        incorporating cutting-edge technologies to improve accuracy and expand\n        our features.\n      </p>\n\n      <p className=\"text-lg\">\n        Join us at Lingua Lighthouse and experience the power of effortless\n        searching within YouTube videos. Unlock a world of knowledge and\n        information by harnessing the potential of spoken language. Let us be\n        your guiding light as you navigate the vast sea of YouTube content.\n      </p>\n\n      <p className=\"text-lg font-bold\">\n        Start your search today and illuminate your language journey with Lingua\n        Lighthouse!\n      </p>\n    </div>\n  );\n}\n", "import type { ActionArgs, LoaderArgs, V2_MetaFunction } from \"@remix-run/node\";\nimport { json, redirect } from \"@remix-run/node\";\nimport { Form, Link, useActionData, useSearchParams } from \"@remix-run/react\";\nimport { useEffect, useRef } from \"react\";\n\nimport { verifyLogin } from \"~/models/user.server\";\nimport { createUserSession, getUserId } from \"~/session.server\";\nimport { safeRedirect, validateEmail } from \"~/utils\";\n\nexport const loader = async ({ request }: LoaderArgs) => {\n  const userId = await getUserId(request);\n  if (userId) return redirect(\"/\");\n  return json({});\n};\n\nexport const action = async ({ request }: ActionArgs) => {\n  const formData = await request.formData();\n  const email = formData.get(\"email\");\n  const password = formData.get(\"password\");\n  const redirectTo = safeRedirect(formData.get(\"redirectTo\"), \"/\");\n  const remember = formData.get(\"remember\");\n\n  if (!validateEmail(email)) {\n    return json(\n      { errors: { email: \"Email is invalid\", password: null } },\n      { status: 400 }\n    );\n  }\n\n  if (typeof password !== \"string\" || password.length === 0) {\n    return json(\n      { errors: { email: null, password: \"Password is required\" } },\n      { status: 400 }\n    );\n  }\n\n  if (password.length < 8) {\n    return json(\n      { errors: { email: null, password: \"Password is too short\" } },\n      { status: 400 }\n    );\n  }\n\n  const user = await verifyLogin(email, password);\n\n  if (!user) {\n    return json(\n      { errors: { email: \"Invalid email or password\", password: null } },\n      { status: 400 }\n    );\n  }\n\n  return createUserSession({\n    redirectTo,\n    remember: remember === \"on\" ? true : false,\n    request,\n    userId: user.id,\n  });\n};\n\nexport const meta: V2_MetaFunction = () => [{ title: \"Login\" }];\n\nexport default function LoginPage() {\n  const [searchParams] = useSearchParams();\n  const redirectTo = searchParams.get(\"redirectTo\") || \"/notes\";\n  const actionData = useActionData<typeof action>();\n  const emailRef = useRef<HTMLInputElement>(null);\n  const passwordRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    if (actionData?.errors?.email) {\n      emailRef.current?.focus();\n    } else if (actionData?.errors?.password) {\n      passwordRef.current?.focus();\n    }\n  }, [actionData]);\n\n  return (\n    <div className=\"flex min-h-full flex-col justify-center\">\n      <div className=\"mx-auto w-full max-w-md px-8\">\n        <Form method=\"post\" className=\"space-y-6\">\n          <div>\n            <label\n              htmlFor=\"email\"\n              className=\"block text-sm font-medium text-gray-700\"\n            >\n              Email address\n            </label>\n            <div className=\"mt-1\">\n              <input\n                ref={emailRef}\n                id=\"email\"\n                required\n                autoFocus={true}\n                name=\"email\"\n                type=\"email\"\n                autoComplete=\"email\"\n                aria-invalid={actionData?.errors?.email ? true : undefined}\n                aria-describedby=\"email-error\"\n                className=\"w-full rounded border border-gray-500 px-2 py-1 text-lg\"\n              />\n              {actionData?.errors?.email ? (\n                <div className=\"pt-1 text-red-700\" id=\"email-error\">\n                  {actionData.errors.email}\n                </div>\n              ) : null}\n            </div>\n          </div>\n\n          <div>\n            <label\n              htmlFor=\"password\"\n              className=\"block text-sm font-medium text-gray-700\"\n            >\n              Password\n            </label>\n            <div className=\"mt-1\">\n              <input\n                id=\"password\"\n                ref={passwordRef}\n                name=\"password\"\n                type=\"password\"\n                autoComplete=\"current-password\"\n                aria-invalid={actionData?.errors?.password ? true : undefined}\n                aria-describedby=\"password-error\"\n                className=\"w-full rounded border border-gray-500 px-2 py-1 text-lg\"\n              />\n              {actionData?.errors?.password ? (\n                <div className=\"pt-1 text-red-700\" id=\"password-error\">\n                  {actionData.errors.password}\n                </div>\n              ) : null}\n            </div>\n          </div>\n\n          <input type=\"hidden\" name=\"redirectTo\" value={redirectTo} />\n          <button\n            type=\"submit\"\n            className=\"w-full rounded bg-blue-500 px-4 py-2 text-white hover:bg-blue-600 focus:bg-blue-400\"\n          >\n            Log in\n          </button>\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center\">\n              <input\n                id=\"remember\"\n                name=\"remember\"\n                type=\"checkbox\"\n                className=\"h-4 w-4 rounded border-gray-300 text-blue-600 focus:ring-blue-500\"\n              />\n              <label\n                htmlFor=\"remember\"\n                className=\"ml-2 block text-sm text-gray-900\"\n              >\n                Remember me\n              </label>\n            </div>\n            <div className=\"text-center text-sm text-gray-500\">\n              Don't have an account?{\" \"}\n              <Link\n                className=\"text-blue-500 underline\"\n                to={{\n                  pathname: \"/join\",\n                  search: searchParams.toString(),\n                }}\n              >\n                Sign up\n              </Link>\n            </div>\n          </div>\n        </Form>\n      </div>\n    </div>\n  );\n}\n", "import { useMatches } from \"@remix-run/react\";\nimport { useMemo } from \"react\";\n\nimport type { User } from \"~/models/user.server\";\n\nconst DEFAULT_REDIRECT = \"/\";\n\n/**\n * This should be used any time the redirect path is user-provided\n * (Like the query string on our login/signup pages). This avoids\n * open-redirect vulnerabilities.\n * @param {string} to The redirect destination\n * @param {string} defaultRedirect The redirect to use if the to is unsafe.\n */\nexport function safeRedirect(\n  to: FormDataEntryValue | string | null | undefined,\n  defaultRedirect: string = DEFAULT_REDIRECT\n) {\n  if (!to || typeof to !== \"string\") {\n    return defaultRedirect;\n  }\n\n  if (!to.startsWith(\"/\") || to.startsWith(\"//\")) {\n    return defaultRedirect;\n  }\n\n  return to;\n}\n\n/**\n * This base hook is used in other hooks to quickly search for specific data\n * across all loader data using useMatches.\n * @param {string} id The route id\n * @returns {JSON|undefined} The router data or undefined if not found\n */\nexport function useMatchesData(\n  id: string\n): Record<string, unknown> | undefined {\n  const matchingRoutes = useMatches();\n  const route = useMemo(\n    () => matchingRoutes.find((route) => route.id === id),\n    [matchingRoutes, id]\n  );\n  return route?.data;\n}\n\nfunction isUser(user: any): user is User {\n  return user && typeof user === \"object\" && typeof user.email === \"string\";\n}\n\nexport function useOptionalUser(): User | undefined {\n  const data = useMatchesData(\"root\");\n  if (!data || !isUser(data.user)) {\n    return undefined;\n  }\n  return data.user;\n}\n\nexport function useUser(): User {\n  const maybeUser = useOptionalUser();\n  if (!maybeUser) {\n    throw new Error(\n      \"No user found in root loader, but user is required by useUser. If user is optional, try useOptionalUser instead.\"\n    );\n  }\n  return maybeUser;\n}\n\nexport function validateEmail(email: unknown): email is string {\n  return typeof email === \"string\" && email.length > 3 && email.includes(\"@\");\n}\n", "import type { LoaderArgs } from \"@remix-run/node\";\nimport { json } from \"@remix-run/node\";\nimport { Form, Link, NavLink, Outlet, useLoaderData } from \"@remix-run/react\";\n\nimport { getNoteListItems } from \"~/models/note.server\";\nimport { requireUserId } from \"~/session.server\";\nimport { useUser } from \"~/utils\";\n\nexport const loader = async ({ request }: LoaderArgs) => {\n  const userId = await requireUserId(request);\n  const noteListItems = await getNoteListItems({ userId });\n  return json({ noteListItems });\n};\n\nexport default function NotesPage() {\n  const data = useLoaderData<typeof loader>();\n  const user = useUser();\n\n  return (\n    <div className=\"flex h-full min-h-screen flex-col\">\n      <header className=\"flex items-center justify-between bg-slate-800 p-4 text-white\">\n        <h1 className=\"text-3xl font-bold\">\n          <Link to=\".\">Notes</Link>\n        </h1>\n        <p>{user.email}</p>\n        <Form action=\"/logout\" method=\"post\">\n          <button\n            type=\"submit\"\n            className=\"rounded bg-slate-600 px-4 py-2 text-blue-100 hover:bg-blue-500 active:bg-blue-600\"\n          >\n            Logout\n          </button>\n        </Form>\n      </header>\n\n      <main className=\"flex h-full bg-white\">\n        <div className=\"h-full w-80 border-r bg-gray-50\">\n          <Link to=\"new\" className=\"block p-4 text-xl text-blue-500\">\n            + New Note\n          </Link>\n\n          <hr />\n\n          {data.noteListItems.length === 0 ? (\n            <p className=\"p-4\">No notes yet</p>\n          ) : (\n            <ol>\n              {data.noteListItems.map((note) => (\n                <li key={note.id}>\n                  <NavLink\n                    className={({ isActive }) =>\n                      `block border-b p-4 text-xl ${isActive ? \"bg-white\" : \"\"}`\n                    }\n                    to={note.id}\n                  >\n                    \uD83D\uDCDD {note.title}\n                  </NavLink>\n                </li>\n              ))}\n            </ol>\n          )}\n        </div>\n\n        <div className=\"flex-1 p-6\">\n          <Outlet />\n        </div>\n      </main>\n    </div>\n  );\n}\n", "import { json, LoaderArgs } from \"@remix-run/node\";\nimport { useLoaderData } from \"@remix-run/react\";\nimport { useEffect, useRef, useState } from \"react\";\nimport VideoContainer from \"~/components/VideoContainer\";\nimport YouTubeVideo from \"~/components/YoutubeVideo\";\nimport useOnScreen from \"~/hooks/isInView\";\nimport { searchVideo } from \"~/search.server\";\nimport { TextMatch } from \"~/transcript.server\";\n\nfunction cleanVideoId(videoId: string) {\n  const ytUrls = [\n    \"https://www.youtube.com/watch?v=\",\n    \"https://youtu.be/\",\n    \"https://www.youtube.com/embed/\",\n  ];\n\n  for (const url of ytUrls) {\n    if (videoId.includes(url)) {\n      return videoId.replace(url, \"\");\n    }\n  }\n  return videoId;\n}\n\nexport const loader = async ({ request }: LoaderArgs) => {\n  const params = new URL(request.url).searchParams;\n  let videoId = params.get(\"id\");\n  const searchText = params.get(\"text\");\n\n  if (!videoId || !searchText) {\n    return json({ video: null, searchText, matches: [], numResults: 0 });\n  }\n  videoId = cleanVideoId(videoId);\n\n  const { matches, video } = await searchVideo(\n    videoId as string,\n    searchText as string\n  );\n  return json({ video, searchText, matches, numResults: matches.length });\n};\n\nexport default function VideoResultsPage() {\n  const data = useLoaderData<typeof loader>();\n\n  const [selected, setSelected] = useState(data.matches[0]);\n  return (\n    <div className=\"flex h-[calc(100vh-80px)] flex-col gap-4\">\n      <>\n        {data.video && (\n          <VideoContainer\n            video={data.video}\n            selected={selected}\n            matches={data.matches}\n            setSelected={setSelected}\n          />\n        )}\n\n        <div className=\"overflow-y-scroll\">\n          <Matches\n            matches={data.matches}\n            selected={selected}\n            setSelected={setSelected}\n          />\n        </div>\n      </>\n    </div>\n  );\n}\n\nfunction Matches({\n  matches,\n  selected,\n  setSelected,\n}: {\n  matches: TextMatch[];\n  selected: TextMatch;\n  setSelected: (match: TextMatch) => void;\n}) {\n  return (\n    <div className=\"flex flex-col gap-4\">\n      {matches.map((match) => (\n        <Match\n          key={match.id}\n          match={match}\n          selected={selected}\n          setSelected={setSelected}\n        />\n      ))}\n    </div>\n  );\n}\n\nfunction Match({\n  match,\n  selected,\n  setSelected,\n}: {\n  match: TextMatch;\n  selected: TextMatch;\n  setSelected: (match: TextMatch) => void;\n}) {\n  const scrollToRef = useRef(null);\n  const isVisible = useOnScreen(scrollToRef);\n  const selectedClass =\n    selected?.id === match.id\n      ? \"bg-gray-400 hover:bg-gray-400\"\n      : \"bg-white hover:bg-gray-200\";\n\n  const clickHander = () => {\n    setSelected(match);\n  };\n\n  useEffect(() => {\n    if (!isVisible && selected?.id === match.id) {\n      // @ts-ignore\n      scrollToRef?.current?.scrollIntoView({\n        behavior: \"smooth\",\n      });\n    }\n  }, [selected]);\n  return (\n    <div\n      className={`w-full cursor-pointer overflow-hidden shadow-lg ${selectedClass}`}\n      onClick={clickHander}\n      ref={scrollToRef}\n    >\n      <div className=\"px-6 py-4\">\n        <p className=\"text-base italic text-gray-800\">\n          {' \"...'}\n          {match.precedingText}\n          <span className=\"font-bold\">{\" \" + match.exactText + \" \"}</span>\n          {match.followingText}\n          {'...\"'}\n        </p>\n        <p className=\"text-gray-500\">{match.startSecondsFormatted}</p>\n      </div>\n    </div>\n  );\n}\n", "import { useEffect, useState } from \"react\";\nimport { TextMatch } from \"~/transcript.server\";\nimport { Video } from \"~/youtube.server\";\nimport ProgressBar from \"./ProgressBar\";\nimport YouTubeVideo from \"./YoutubeVideo\";\n\n// tailwind's breakpoints\nconst breakPoints = {\n  md: 768,\n  lg: 1024,\n};\n\nexport default function VideoContainer({\n  video,\n  selected,\n  matches,\n  setSelected,\n}: {\n  video: Video;\n  selected: TextMatch;\n  matches: TextMatch[];\n  setSelected: (match: TextMatch) => void;\n}) {\n  const [duration, setDuration] = useState(0);\n  const [videoLoaded, setVideoLoaded] = useState(false);\n  const [playing, setPlaying] = useState(false);\n  const [seekTime, setSeekTime] = useState<number>(selected.startSeconds);\n  const [isBigScreen, setIsBigScreen] = useState<boolean | undefined>(\n    undefined\n  );\n  const [playingAll, setPlayingAll] = useState(false);\n\n  console.log(selected);\n\n  useEffect(() => {\n    if (playingAll && videoLoaded) {\n      setSeekTime(selected.startSeconds);\n      if (!playing) {\n        setPlaying(true);\n      }\n\n      const timeToNext = selected.endSeconds - selected.startSeconds;\n      const timeout = setTimeout(() => {\n        // find the next match\n        const currentMatchIndex = matches.findIndex(\n          (match) => match.id === selected.id\n        );\n        const nextMatch = matches[currentMatchIndex + 1];\n\n        if (nextMatch) {\n          setSelected(nextMatch);\n        } else {\n          setPlayingAll(false);\n          setPlaying(false);\n        }\n\n        return () => clearTimeout(timeout);\n      }, (timeToNext + 1) * 1000);\n    }\n  }, [playingAll, selected, matches, videoLoaded]);\n\n  useEffect(() => {\n    const setBigScreen = () =>\n      setIsBigScreen(window.innerWidth > breakPoints.md);\n    setBigScreen();\n    window.addEventListener(\"resize\", setBigScreen);\n    return () => {\n      window.removeEventListener(\"resize\", setBigScreen);\n    };\n  }, []);\n  return (\n    <div className=\"grid grid-cols-1 gap-6 md:grid-cols-2\">\n      {isBigScreen !== undefined && (\n        <div className=\"order-1\">\n          <YouTubeVideo\n            videoId={video?.id as string}\n            seekTime={seekTime}\n            isBigScreen={isBigScreen}\n            playing={playing}\n            setPlaying={setPlaying}\n            setDuration={setDuration}\n            setLoaded={setVideoLoaded}\n          />\n        </div>\n      )}\n      {videoLoaded && (\n        <div className=\"order-2 col-span-1 md:order-3 md:col-span-2\">\n          <ProgressBar\n            selected={selected}\n            video={video}\n            matches={matches}\n            duration={duration}\n          />\n        </div>\n      )}\n      <div className=\"order-3 ml-6 md:order-2 md:ml-0\">\n        <Aside\n          video={video}\n          numResults={matches.length}\n          searchText={selected.exactText}\n          playingAll={playingAll}\n          setPlayingAll={setPlayingAll}\n        />\n      </div>\n    </div>\n  );\n}\n\nfunction Aside({\n  video,\n  numResults,\n  searchText,\n  playingAll,\n  setPlayingAll,\n}: {\n  video: Video;\n  numResults: number;\n  searchText: string;\n  playingAll: boolean;\n  setPlayingAll: (playing: boolean) => void;\n}) {\n  return (\n    <div className=\"flex flex-col gap-2 md:px-3\">\n      <div className=\"text-lg font-bold\">{video.title || \"No video found\"}</div>\n\n      <div className=\"text-lg font-bold\">{video.channelTitle}</div>\n\n      <ResultsText numResults={numResults} searchText={searchText as string} />\n      <Controls playingAll={playingAll} setPlayingAll={setPlayingAll} />\n    </div>\n  );\n}\n\nfunction ResultsText({\n  numResults,\n  searchText,\n}: {\n  numResults: number;\n  searchText: string;\n}) {\n  if (numResults > 0) {\n    return (\n      <h2 className=\"text-md\">\n        {numResults} results found for\n        <span className=\"font-bold italic\"> \"{searchText}\" </span>\n      </h2>\n    );\n  }\n  return (\n    <h2 className=\"text-md\">\n      No results found for\n      <span className=\"font-bold italic\"> \"{searchText}\" </span>\n    </h2>\n  );\n}\n\nfunction Controls({\n  playingAll,\n  setPlayingAll,\n}: {\n  playingAll: boolean;\n  setPlayingAll: (playing: boolean) => void;\n}) {\n  console.log({ playingAll });\n\n  return (\n    <label className=\"relative inline-flex cursor-pointer items-center\">\n      <input\n        type=\"checkbox\"\n        checked={playingAll}\n        onChange={(e) => setPlayingAll(e.target.checked)}\n        className=\"peer sr-only\"\n      />\n      <div className=\"peer h-6 w-11 rounded-full bg-gray-200 after:absolute after:left-[2px] after:top-[2px] after:h-5 after:w-5 after:rounded-full after:border after:border-gray-300 after:bg-white after:transition-all after:content-[''] peer-checked:bg-blue-600 peer-checked:after:translate-x-full peer-checked:after:border-white peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:border-gray-600 dark:bg-gray-700 dark:peer-focus:ring-blue-800\"></div>\n      <span className=\"ml-3 text-sm font-medium text-gray-900\">\n        {playingAll ? \"Stop playing all\" : \"Play all\"}\n      </span>\n    </label>\n  );\n}\n", "import { TextMatch } from \"~/transcript.server\";\nimport { Video } from \"~/youtube.server\";\n\nexport default function ProgressBar({\n  selected,\n  video,\n  matches,\n  duration,\n}: {\n  selected: TextMatch;\n  video: Video;\n  matches: TextMatch[];\n  duration: number;\n}) {\n  const percentage = Math.round((selected.startSeconds / duration) * 100);\n  return (\n    <div className=\"relative h-10\">\n      {matches.map((match) => {\n        const percentage = Math.round((match.startSeconds / duration) * 100);\n\n        return (\n          <BreadCrumb\n            key={match.id}\n            position={percentage}\n            text={match.startSecondsFormatted}\n          />\n        );\n      })}\n      <Background />\n      <Progress percentage={percentage} />\n    </div>\n  );\n}\n\nfunction Progress({ percentage }: { percentage: number }) {\n  return (\n    <div\n      style={{\n        position: \"absolute\",\n        bottom: 0,\n        left: 0,\n        width: `${percentage}%`,\n        height: \"100%\",\n        backgroundColor: \"#868E96\",\n        zIndex: 2,\n      }}\n    />\n  );\n}\n\nfunction Background() {\n  return (\n    <div\n      style={{\n        position: \"absolute\",\n        bottom: 0,\n        left: 0,\n        width: \"100%\",\n        height: \"100%\",\n        backgroundColor: \"#CED4DA\",\n      }}\n    />\n  );\n}\n\nfunction BreadCrumb({ position, text }: { position: number; text: string }) {\n  return (\n    <div\n      style={{\n        position: \"absolute\",\n        bottom: 0,\n        left: `${position}%`,\n        height: \"100%\",\n        width: 30,\n        justifyContent: \"center\",\n        alignItems: \"center\",\n      }}\n    >\n      <div className=\"absolute z-10 h-full w-0.5 bg-black\" />\n      <Badge text={text} />\n    </div>\n  );\n}\n\nfunction Badge({ text }: { text: string }) {\n  return (\n    <span\n      className=\"mr-2 rounded bg-blue-100 px-2.5 py-0.5 text-xs font-medium\"\n      style={{\n        opacity: 0.75,\n        top: \"-26px\",\n        position: \"relative\",\n        left: \"-30px\",\n      }}\n    >\n      {text}\n    </span>\n  );\n}\n", "import { memo, useEffect, useRef, useState } from \"react\";\nimport YouTube from \"react-youtube\";\n\nexport default function YouTubeVideo({\n  videoId,\n  seekTime,\n  isBigScreen,\n  playing,\n  setPlaying,\n  setDuration,\n  setLoaded,\n}: {\n  videoId: string;\n  seekTime: number;\n  isBigScreen: boolean;\n  playing: boolean;\n  setPlaying: (playing: boolean) => void;\n  setDuration: (duration: number) => void;\n  setLoaded: (loaded: boolean) => void;\n}) {\n  const playerRef = useRef(null);\n\n  console.log(isBigScreen);\n\n  const videoOpts = isBigScreen\n    ? {\n        width: \"100%\",\n        height: 300,\n      }\n    : {\n        height: 300,\n        width: \"100%\",\n      };\n\n  useEffect(() => {\n    // @ts-ignore\n    if (playerRef?.current?.internalPlayer) {\n      // @ts-ignore\n      playerRef.current.internalPlayer.seekTo(seekTime);\n    }\n  }, [seekTime]);\n\n  useEffect(() => {\n    // @ts-ignore\n    if (playerRef?.current?.internalPlayer) {\n      // @ts-ignore\n      if (playing) {\n        // @ts-ignore\n        playerRef.current.internalPlayer.playVideo();\n      } else {\n        // @ts-ignore\n        playerRef.current.internalPlayer.pauseVideo();\n      }\n    }\n  }, [playing]);\n  return videoId ? (\n    <YouTube\n      videoId={videoId}\n      opts={videoOpts}\n      ref={playerRef}\n      onPlay={() => setPlaying(true)}\n      onPause={() => setPlaying(false)}\n      onReady={(e) => {\n        setDuration(e.target.getDuration());\n        setLoaded(true);\n      }}\n    />\n  ) : (\n    <div></div>\n  );\n}\n", "import { RefObject, useState, useMemo, useEffect } from \"react\";\n\nexport default function useOnScreen(ref: RefObject<HTMLElement>) {\n  const [isIntersecting, setIntersecting] = useState(false);\n\n  useEffect(() => {\n    if (!ref.current) return;\n    const observer = new IntersectionObserver(([entry]) =>\n      setIntersecting(entry.isIntersecting)\n    );\n\n    observer.observe(ref.current as HTMLElement);\n    return () => observer.disconnect();\n  }, []);\n\n  return isIntersecting;\n}\n", "import type { ActionArgs, LoaderArgs, V2_MetaFunction } from \"@remix-run/node\";\nimport { json, redirect } from \"@remix-run/node\";\nimport { Form, Link, useActionData, useSearchParams } from \"@remix-run/react\";\nimport { useEffect, useRef } from \"react\";\n\nimport { createUser, getUserByEmail } from \"~/models/user.server\";\nimport { createUserSession, getUserId } from \"~/session.server\";\nimport { safeRedirect, validateEmail } from \"~/utils\";\n\nexport const loader = async ({ request }: LoaderArgs) => {\n  const userId = await getUserId(request);\n  if (userId) return redirect(\"/\");\n  return json({});\n};\n\nexport const action = async ({ request }: ActionArgs) => {\n  const formData = await request.formData();\n  const email = formData.get(\"email\");\n  const password = formData.get(\"password\");\n  const redirectTo = safeRedirect(formData.get(\"redirectTo\"), \"/\");\n\n  if (!validateEmail(email)) {\n    return json(\n      { errors: { email: \"Email is invalid\", password: null } },\n      { status: 400 }\n    );\n  }\n\n  if (typeof password !== \"string\" || password.length === 0) {\n    return json(\n      { errors: { email: null, password: \"Password is required\" } },\n      { status: 400 }\n    );\n  }\n\n  if (password.length < 8) {\n    return json(\n      { errors: { email: null, password: \"Password is too short\" } },\n      { status: 400 }\n    );\n  }\n\n  const existingUser = await getUserByEmail(email);\n  if (existingUser) {\n    return json(\n      {\n        errors: {\n          email: \"A user already exists with this email\",\n          password: null,\n        },\n      },\n      { status: 400 }\n    );\n  }\n\n  const user = await createUser(email, password);\n\n  return createUserSession({\n    redirectTo,\n    remember: false,\n    request,\n    userId: user.id,\n  });\n};\n\nexport const meta: V2_MetaFunction = () => [{ title: \"Sign Up\" }];\n\nexport default function Join() {\n  const [searchParams] = useSearchParams();\n  const redirectTo = searchParams.get(\"redirectTo\") ?? undefined;\n  const actionData = useActionData<typeof action>();\n  const emailRef = useRef<HTMLInputElement>(null);\n  const passwordRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    if (actionData?.errors?.email) {\n      emailRef.current?.focus();\n    } else if (actionData?.errors?.password) {\n      passwordRef.current?.focus();\n    }\n  }, [actionData]);\n\n  return (\n    <div className=\"flex min-h-full flex-col justify-center\">\n      <div className=\"mx-auto w-full max-w-md px-8\">\n        <Form method=\"post\" className=\"space-y-6\">\n          <div>\n            <label\n              htmlFor=\"email\"\n              className=\"block text-sm font-medium text-gray-700\"\n            >\n              Email address\n            </label>\n            <div className=\"mt-1\">\n              <input\n                ref={emailRef}\n                id=\"email\"\n                required\n                autoFocus={true}\n                name=\"email\"\n                type=\"email\"\n                autoComplete=\"email\"\n                aria-invalid={actionData?.errors?.email ? true : undefined}\n                aria-describedby=\"email-error\"\n                className=\"w-full rounded border border-gray-500 px-2 py-1 text-lg\"\n              />\n              {actionData?.errors?.email ? (\n                <div className=\"pt-1 text-red-700\" id=\"email-error\">\n                  {actionData.errors.email}\n                </div>\n              ) : null}\n            </div>\n          </div>\n\n          <div>\n            <label\n              htmlFor=\"password\"\n              className=\"block text-sm font-medium text-gray-700\"\n            >\n              Password\n            </label>\n            <div className=\"mt-1\">\n              <input\n                id=\"password\"\n                ref={passwordRef}\n                name=\"password\"\n                type=\"password\"\n                autoComplete=\"new-password\"\n                aria-invalid={actionData?.errors?.password ? true : undefined}\n                aria-describedby=\"password-error\"\n                className=\"w-full rounded border border-gray-500 px-2 py-1 text-lg\"\n              />\n              {actionData?.errors?.password ? (\n                <div className=\"pt-1 text-red-700\" id=\"password-error\">\n                  {actionData.errors.password}\n                </div>\n              ) : null}\n            </div>\n          </div>\n\n          <input type=\"hidden\" name=\"redirectTo\" value={redirectTo} />\n          <button\n            type=\"submit\"\n            className=\"w-full rounded bg-blue-500 px-4 py-2 text-white hover:bg-blue-600 focus:bg-blue-400\"\n          >\n            Create Account\n          </button>\n          <div className=\"flex items-center justify-center\">\n            <div className=\"text-center text-sm text-gray-500\">\n              Already have an account?{\" \"}\n              <Link\n                className=\"text-blue-500 underline\"\n                to={{\n                  pathname: \"/login\",\n                  search: searchParams.toString(),\n                }}\n              >\n                Log in\n              </Link>\n            </div>\n          </div>\n        </Form>\n      </div>\n    </div>\n  );\n}\n", "import type { ActionArgs } from \"@remix-run/node\";\nimport { redirect } from \"@remix-run/node\";\n\nimport { createUser } from \"~/models/user.server\";\nimport { createUserSession } from \"~/session.server\";\n\nexport const action = async ({ request }: ActionArgs) => {\n  if (process.env.NODE_ENV === \"production\") {\n    console.error(\n      \"\uD83D\uDEA8 \uD83D\uDEA8 \uD83D\uDEA8 \uD83D\uDEA8 \uD83D\uDEA8 \uD83D\uDEA8 \uD83D\uDEA8 \uD83D\uDEA8 test routes should not be enabled in production \uD83D\uDEA8 \uD83D\uDEA8 \uD83D\uDEA8 \uD83D\uDEA8 \uD83D\uDEA8 \uD83D\uDEA8 \uD83D\uDEA8 \uD83D\uDEA8\"\n    );\n    // test routes should not be enabled in production or without\n    // enable test routes... Just in case this somehow slips through\n    // we'll redirect :)\n    return redirect(\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\");\n  }\n\n  const { email } = await request.json();\n  if (!email) {\n    throw new Error(\"email required for login\");\n  }\n  if (!email.endsWith(\"@example.com\")) {\n    throw new Error(\"All test emails must end in @example.com\");\n  }\n\n  const user = await createUser(email, \"myreallystrongpassword\");\n\n  return createUserSession({\n    redirectTo: \"/\",\n    remember: true,\n    request,\n    userId: user.id,\n  });\n};\n\nexport default null;\n", "export default {'entry':{'module':'/_static/build/entry.client-TLYL2TMG.js','imports':['/_static/build/_shared/chunk-LF62M53N.js','/_static/build/_shared/chunk-6XW2KFLU.js','/_static/build/_shared/chunk-OV6IFOTW.js']},'routes':{'../cypress/support/test-routes/create-user':{'id':'../cypress/support/test-routes/create-user','parentId':'root','path':'__tests/create-user','index':undefined,'caseSensitive':undefined,'module':'/_static/build/_.._/cypress/support/test-routes/create-user-TJKEYJ3V.js','imports':undefined,'hasAction':true,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false},'root':{'id':'root','parentId':undefined,'path':'','index':undefined,'caseSensitive':undefined,'module':'/_static/build/root-XIXUWEHO.js','imports':['/_static/build/_shared/chunk-C4CEVAJD.js','/_static/build/_shared/chunk-PKK3VIMV.js'],'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/_index':{'id':'routes/_index','parentId':'root','path':undefined,'index':true,'caseSensitive':undefined,'module':'/_static/build/routes/_index-LN6G6TKJ.js','imports':['/_static/build/_shared/chunk-YKKF5ZER.js'],'hasAction':true,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/about':{'id':'routes/about','parentId':'root','path':'about','index':undefined,'caseSensitive':undefined,'module':'/_static/build/routes/about-XKE3UGE3.js','imports':undefined,'hasAction':false,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/api.jobs.$channelId.$searchText':{'id':'routes/api.jobs.$channelId.$searchText','parentId':'root','path':'api/jobs/:channelId/:searchText','index':undefined,'caseSensitive':undefined,'module':'/_static/build/routes/api.jobs.$channelId.$searchText-6XBOKVV5.js','imports':undefined,'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/api.jobs.run.$channelId':{'id':'routes/api.jobs.run.$channelId','parentId':'root','path':'api/jobs/run/:channelId','index':undefined,'caseSensitive':undefined,'module':'/_static/build/routes/api.jobs.run.$channelId-QBHCPXU3.js','imports':undefined,'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/channel':{'id':'routes/channel','parentId':'root','path':'channel','index':undefined,'caseSensitive':undefined,'module':'/_static/build/routes/channel-TDMTYODE.js','imports':['/_static/build/_shared/chunk-YKKF5ZER.js','/_static/build/_shared/chunk-NANAMF6K.js'],'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/jobs.$channelId.$searchText':{'id':'routes/jobs.$channelId.$searchText','parentId':'root','path':'jobs/:channelId/:searchText','index':undefined,'caseSensitive':undefined,'module':'/_static/build/routes/jobs.$channelId.$searchText-WAM3IWMU.js','imports':undefined,'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/join':{'id':'routes/join','parentId':'root','path':'join','index':undefined,'caseSensitive':undefined,'module':'/_static/build/routes/join-5DFJHY2M.js','imports':['/_static/build/_shared/chunk-VXOUHI5O.js','/_static/build/_shared/chunk-JPFZ4UI3.js'],'hasAction':true,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/login':{'id':'routes/login','parentId':'root','path':'login','index':undefined,'caseSensitive':undefined,'module':'/_static/build/routes/login-LALPHX4K.js','imports':['/_static/build/_shared/chunk-VXOUHI5O.js','/_static/build/_shared/chunk-JPFZ4UI3.js'],'hasAction':true,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/logout':{'id':'routes/logout','parentId':'root','path':'logout','index':undefined,'caseSensitive':undefined,'module':'/_static/build/routes/logout-YHJIE5NB.js','imports':undefined,'hasAction':true,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/notes':{'id':'routes/notes','parentId':'root','path':'notes','index':undefined,'caseSensitive':undefined,'module':'/_static/build/routes/notes-QXPXZ2HU.js','imports':['/_static/build/_shared/chunk-JPFZ4UI3.js','/_static/build/_shared/chunk-U5SFILUK.js'],'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/notes.$noteId':{'id':'routes/notes.$noteId','parentId':'routes/notes','path':':noteId','index':undefined,'caseSensitive':undefined,'module':'/_static/build/routes/notes.$noteId-ZQ54HUH7.js','imports':['/_static/build/_shared/chunk-C4CEVAJD.js','/_static/build/_shared/chunk-PKK3VIMV.js'],'hasAction':true,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':true},'routes/notes._index':{'id':'routes/notes._index','parentId':'routes/notes','path':undefined,'index':true,'caseSensitive':undefined,'module':'/_static/build/routes/notes._index-4FR33KP5.js','imports':undefined,'hasAction':false,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/notes.new':{'id':'routes/notes.new','parentId':'routes/notes','path':'new','index':undefined,'caseSensitive':undefined,'module':'/_static/build/routes/notes.new-E7QO5X7Y.js','imports':['/_static/build/_shared/chunk-C4CEVAJD.js','/_static/build/_shared/chunk-PKK3VIMV.js'],'hasAction':true,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/video':{'id':'routes/video','parentId':'root','path':'video','index':undefined,'caseSensitive':undefined,'module':'/_static/build/routes/video-VFDB7IP5.js','imports':['/_static/build/_shared/chunk-NANAMF6K.js'],'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false}},'version':'9795cbeb','hmr':undefined,'url':'/_static/build/manifest-9795CBEB.js'};"],
  "mappings": "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",
  "names": ["cssBundleHref", "isbot", "import_node", "import_react", "import_node", "import_tiny_invariant", "arc", "bcrypt", "invariant", "bcrypt", "invariant", "import_jsx_dev_runtime", "loader", "import_functions", "arc", "loader", "job", "loader", "import_react", "import_react_router", "import_jsx_dev_runtime", "import_jsx_dev_runtime", "loader", "_a", "_b", "_c", "_d", "_e", "_f", "loader", "import_node", "import_functions", "import_cuid2", "arc", "import_functions", "import_cuid2", "arc", "loader", "chunk", "loader", "import_node", "import_react", "import_tiny_invariant", "import_functions", "import_cuid2", "skToId", "arc", "import_jsx_dev_runtime", "loader", "invariant", "import_react", "import_jsx_dev_runtime", "action", "import_node", "import_react", "import_jsx_dev_runtime", "action", "_a", "_b", "_c", "_d", "loader", "import_node", "import_react", "import_lodash", "import_jsx_dev_runtime", "loader", "channelId", "action", "import_node", "import_react", "import_jsx_dev_runtime", "action", "action", "loader", "import_node", "action", "loader", "import_jsx_dev_runtime", "action", "loader", "meta", "import_node", "import_react", "import_react", "route", "import_jsx_dev_runtime", "loader", "action", "meta", "_a", "_b", "_c", "_d", "loader", "import_node", "import_react", "import_jsx_dev_runtime", "loader", "loader", "import_node", "import_react", "import_react", "import_jsx_dev_runtime", "percentage", "import_react", "import_jsx_dev_runtime", "YouTube", "import_jsx_dev_runtime", "ResultsText", "import_react", "entry", "import_jsx_dev_runtime", "loader", "action", "loader", "meta", "import_node", "import_react", "import_jsx_dev_runtime", "loader", "action", "meta", "_a", "_b", "_c", "_d", "action", "import_node", "action"]
}
